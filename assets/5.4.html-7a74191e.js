import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-c1ad9858.js";const e={},p=t(`<p>面试过程中，死锁也是高频的考点，因为如果线上环境真多发生了死锁，那真的出大事了。</p><p>这次，我们就来系统地聊聊死锁的问题。</p><ul><li>死锁的概念；</li><li>模拟死锁问题的产生；</li><li>利用工具排查死锁问题；</li><li>避免死锁问题的发生；</li></ul><hr><h2 id="死锁的概念" tabindex="-1"><a class="header-anchor" href="#死锁的概念" aria-hidden="true">#</a> 死锁的概念</h2><p>在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。</p><p>那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成<strong>两个线程都在等待对方释放锁</strong>，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了<strong>死锁</strong>。</p><p>举个例子，小林拿了小美房间的钥匙，而小林在自己的房间里，小美拿了小林房间的钥匙，而小美也在自己的房间里。如果小林要从自己的房间里出去，必须拿到小美手中的钥匙，但是小美要出去，又必须拿到小林手中的钥匙，这就形成了死锁。</p><p>死锁只有<strong>同时满足</strong>以下四个条件才会发生：</p><ul><li>互斥条件；</li><li>持有并等待条件；</li><li>不可剥夺条件；</li><li>环路等待条件；</li></ul><h3 id="互斥条件" tabindex="-1"><a class="header-anchor" href="#互斥条件" aria-hidden="true">#</a> 互斥条件</h3><p>互斥条件是指<strong>多个线程不能同时使用同一个资源</strong>。</p><p>比如下图，如果线程 A 已经持有的资源，不能再同时被线程 B 持有，如果线程 B 请求获取线程 A 已经占用的资源，那线程 B 只能等待，直到线程 A 释放了资源。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307012113816.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="持有并等待条件" tabindex="-1"><a class="header-anchor" href="#持有并等待条件" aria-hidden="true">#</a> 持有并等待条件</h3><p>持有并等待条件是指，当线程 A 已经持有了资源 1，又想申请资源 2，而资源 2 已经被线程 C 持有了，所以线程 A 就会处于等待状态，但是<strong>线程 A 在等待资源 2 的同时并不会释放自己已经持有的资源 1</strong>。</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/操作系统/死锁/持有并等待条件.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="不可剥夺条件" tabindex="-1"><a class="header-anchor" href="#不可剥夺条件" aria-hidden="true">#</a> 不可剥夺条件</h3><p>不可剥夺条件是指，当线程已经持有了资源 ，<strong>在自己使用完之前不能被其他线程获取</strong>，线程 B 如果也想使用此资源，则只能在线程 A 使用完并释放后才能获取。</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/操作系统/死锁/不可剥夺条件.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="环路等待条件" tabindex="-1"><a class="header-anchor" href="#环路等待条件" aria-hidden="true">#</a> 环路等待条件</h3><p>环路等待条件指的是，在死锁发生的时候，<strong>两个线程获取资源的顺序构成了环形链</strong>。</p><p>比如，线程 A 已经持有资源 2，而想请求资源 1， 线程 B 已经获取了资源 1，而想请求资源 2，这就形成资源请求等待的环形图。</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/操作系统/死锁/环路等待条件.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h2 id="模拟死锁问题的产生" tabindex="-1"><a class="header-anchor" href="#模拟死锁问题的产生" aria-hidden="true">#</a> 模拟死锁问题的产生</h2><p>Talk is cheap. Show me the code.</p><p>下面，我们用代码来模拟死锁问题的产生。</p><p>首先，我们先创建 2 个线程，分别为线程 A 和 线程 B，然后有两个互斥锁，分别是 mutex_A 和 mutex_B，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pthread_mutex_t</span> mutex_A <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>
<span class="token class-name">pthread_mutex_t</span> mutex_B <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">pthread_t</span> tidA<span class="token punctuation">,</span> tidB<span class="token punctuation">;</span>
    
    <span class="token comment">//创建两个线程</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tidA<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> threadA_proc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tidB<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> threadB_proc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tidA<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tidB<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;exit\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们看下线程 A 函数做了什么。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//线程函数 A</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">threadA_proc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread A waiting get ResourceA \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread A got ResourceA \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread A waiting get ResourceB \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_B<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread A got ResourceB \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_B<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，线程 A 函数的过程：</p><ul><li>先获取互斥锁 A，然后睡眠 1 秒；</li><li>再获取互斥锁 B，然后释放互斥锁 B；</li><li>最后释放互斥锁 A；</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//线程函数 B</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">threadB_proc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B waiting get ResourceB \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_B<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B got ResourceB \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B waiting  get ResourceA \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B got ResourceA \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_B<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，线程 B 函数的过程：</p><ul><li>先获取互斥锁 B，然后睡眠 1 秒；</li><li>再获取互斥锁 A，然后释放互斥锁 A；</li><li>最后释放互斥锁 B；</li></ul><p>然后，我们运行这个程序，运行结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>thread B waiting get ResourceB 
thread B got ResourceB 
thread A waiting get ResourceA 
thread A got ResourceA 
thread B waiting get ResourceA 
thread A waiting get ResourceB 
// 阻塞中。。。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到线程 B 在等待互斥锁 A 的释放，线程 A 在等待互斥锁 B 的释放，双方都在等待对方资源的释放，很明显，产生了死锁问题。</p><hr><h2 id="利用工具排查死锁问题" tabindex="-1"><a class="header-anchor" href="#利用工具排查死锁问题" aria-hidden="true">#</a> 利用工具排查死锁问题</h2><p>如果你想排查你的 Java 程序是否死锁，则可以使用 <code>jstack</code> 工具，它是 jdk 自带的线程堆栈分析工具。</p><p>由于小林的死锁代码例子是 C 写的，在 Linux 下，我们可以使用 <code>pstack</code> + <code>gdb</code> 工具来定位死锁问题。</p><p>pstack 命令可以显示每个线程的栈跟踪信息（函数调用过程），它的使用方式也很简单，只需要 <code>pstack &lt;pid&gt;</code> 就可以了。</p><p>那么，在定位死锁问题时，我们可以多次执行 pstack 命令查看线程的函数调用过程，多次对比结果，确认哪几个线程一直没有变化，且是因为在等待锁，那么大概率是由于死锁问题导致的。</p><p>我用 pstack 输出了我前面模拟死锁问题的进程的所有线程的情况，我多次执行命令后，其结果都一样，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pstack <span class="token number">87746</span>
Thread <span class="token number">3</span> <span class="token punctuation">(</span>Thread 0x7f60a610a700 <span class="token punctuation">(</span>LWP <span class="token number">87747</span><span class="token punctuation">))</span>:
<span class="token comment">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span>
<span class="token comment">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span>
<span class="token comment">#3  0x0000000000400725 in threadA_proc ()</span>
<span class="token comment">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span>
<span class="token comment">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span>
Thread <span class="token number">2</span> <span class="token punctuation">(</span>Thread 0x7f60a5709700 <span class="token punctuation">(</span>LWP <span class="token number">87748</span><span class="token punctuation">))</span>:
<span class="token comment">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span>
<span class="token comment">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span>
<span class="token comment">#3  0x0000000000400792 in threadB_proc ()</span>
<span class="token comment">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span>
<span class="token comment">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span>
Thread <span class="token number">1</span> <span class="token punctuation">(</span>Thread 0x7f60a610c700 <span class="token punctuation">(</span>LWP <span class="token number">87746</span><span class="token punctuation">))</span>:
<span class="token comment">#0  0x0000003720e080e5 in pthread_join () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000000000400806 in main ()</span>

<span class="token punctuation">..</span><span class="token punctuation">..</span>

$ pstack <span class="token number">87746</span>
Thread <span class="token number">3</span> <span class="token punctuation">(</span>Thread 0x7f60a610a700 <span class="token punctuation">(</span>LWP <span class="token number">87747</span><span class="token punctuation">))</span>:
<span class="token comment">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span>
<span class="token comment">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span>
<span class="token comment">#3  0x0000000000400725 in threadA_proc ()</span>
<span class="token comment">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span>
<span class="token comment">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span>
Thread <span class="token number">2</span> <span class="token punctuation">(</span>Thread 0x7f60a5709700 <span class="token punctuation">(</span>LWP <span class="token number">87748</span><span class="token punctuation">))</span>:
<span class="token comment">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span>
<span class="token comment">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span>
<span class="token comment">#3  0x0000000000400792 in threadB_proc ()</span>
<span class="token comment">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span>
<span class="token comment">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span>
Thread <span class="token number">1</span> <span class="token punctuation">(</span>Thread 0x7f60a610c700 <span class="token punctuation">(</span>LWP <span class="token number">87746</span><span class="token punctuation">))</span>:
<span class="token comment">#0  0x0000003720e080e5 in pthread_join () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000000000400806 in main ()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，Thread 2 和 Thread 3 一直阻塞获取锁（<em>pthread_mutex_lock</em>）的过程，而且 pstack 多次输出信息都没有变化，那么可能大概率发生了死锁。</p><p>但是，还不能够确认这两个线程是在互相等待对方的锁的释放，因为我们看不到它们是等在哪个锁对象，于是我们可以使用 gdb 工具进一步确认。</p><p>整个 gdb 调试过程，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// gdb 命令
$ gdb <span class="token parameter variable">-p</span> <span class="token number">87746</span>

// 打印所有的线程信息
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info thread
  <span class="token number">3</span> Thread 0x7f60a610a700 <span class="token punctuation">(</span>LWP <span class="token number">87747</span><span class="token punctuation">)</span>  0x0000003720e0da1d <span class="token keyword">in</span> __lll_lock_wait <span class="token punctuation">(</span><span class="token punctuation">)</span> from /lib64/libpthread.so.0
  <span class="token number">2</span> Thread 0x7f60a5709700 <span class="token punctuation">(</span>LWP <span class="token number">87748</span><span class="token punctuation">)</span>  0x0000003720e0da1d <span class="token keyword">in</span> __lll_lock_wait <span class="token punctuation">(</span><span class="token punctuation">)</span> from /lib64/libpthread.so.0
* <span class="token number">1</span> Thread 0x7f60a610c700 <span class="token punctuation">(</span>LWP <span class="token number">87746</span><span class="token punctuation">)</span>  0x0000003720e080e5 <span class="token keyword">in</span> pthread_join <span class="token punctuation">(</span><span class="token punctuation">)</span> from /lib64/libpthread.so.0
//最左边的 * 表示 gdb 锁定的线程，切换到第二个线程去查看

// 切换到第2个线程
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> thread <span class="token number">2</span>
<span class="token punctuation">[</span>Switching to thread <span class="token number">2</span> <span class="token punctuation">(</span>Thread 0x7f60a5709700 <span class="token punctuation">(</span>LWP <span class="token number">87748</span><span class="token punctuation">))</span><span class="token punctuation">]</span><span class="token comment">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0 </span>

// bt 可以打印函数堆栈，却无法看到函数参数，跟 pstack 命令一样 
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> bt
<span class="token comment">#0  0x0000003720e0da1d in __lll_lock_wait () from /lib64/libpthread.so.0</span>
<span class="token comment">#1  0x0000003720e093ca in _L_lock_829 () from /lib64/libpthread.so.0</span>
<span class="token comment">#2  0x0000003720e09298 in pthread_mutex_lock () from /lib64/libpthread.so.0</span>
<span class="token comment">#3  0x0000000000400792 in threadB_proc (data=0x0) at dead_lock.c:25</span>
<span class="token comment">#4  0x0000003720e07893 in start_thread () from /lib64/libpthread.so.0</span>
<span class="token comment">#5  0x00000037206f4bfd in clone () from /lib64/libc.so.6</span>

// 打印第三帧信息，每次函数调用都会有压栈的过程，而 frame 则记录栈中的帧信息
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> frame <span class="token number">3</span>
<span class="token comment">#3  0x0000000000400792 in threadB_proc (data=0x0) at dead_lock.c:25</span>
<span class="token number">27</span>    printf<span class="token punctuation">(</span><span class="token string">&quot;thread B waiting get ResourceA <span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span>    pthread_mutex_lock<span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>

// 打印mutex_A的值 ,  __owner表示gdb中标示线程的值，即LWP
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p mutex_A
<span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span>__lock <span class="token operator">=</span> <span class="token number">2</span>, __count <span class="token operator">=</span> <span class="token number">0</span>, __owner <span class="token operator">=</span> <span class="token number">87747</span>, __nusers <span class="token operator">=</span> <span class="token number">1</span>, __kind <span class="token operator">=</span> <span class="token number">0</span>, __spins <span class="token operator">=</span> <span class="token number">0</span>, __list <span class="token operator">=</span> <span class="token punctuation">{</span>__prev <span class="token operator">=</span> 0x0, __next <span class="token operator">=</span> 0x0<span class="token punctuation">}</span><span class="token punctuation">}</span>, 
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\303">\\303</span>V<span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">26</span> times<span class="token operator">&gt;</span>, __align <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span>

// 打印mutex_B的值 ,  __owner表示gdb中标示线程的值，即LWP
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p mutex_B
<span class="token variable">$2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>__data <span class="token operator">=</span> <span class="token punctuation">{</span>__lock <span class="token operator">=</span> <span class="token number">2</span>, __count <span class="token operator">=</span> <span class="token number">0</span>, __owner <span class="token operator">=</span> <span class="token number">87748</span>, __nusers <span class="token operator">=</span> <span class="token number">1</span>, __kind <span class="token operator">=</span> <span class="token number">0</span>, __spins <span class="token operator">=</span> <span class="token number">0</span>, __list <span class="token operator">=</span> <span class="token punctuation">{</span>__prev <span class="token operator">=</span> 0x0, __next <span class="token operator">=</span> 0x0<span class="token punctuation">}</span><span class="token punctuation">}</span>, 
  __size <span class="token operator">=</span> <span class="token string">&quot;<span class="token entity" title="\\002">\\002</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\304">\\304</span>V<span class="token entity" title="\\001">\\001</span><span class="token entity" title="\\000">\\000</span><span class="token entity" title="\\001">\\001</span>&quot;</span>, <span class="token string">&#39;\\000&#39;</span> <span class="token operator">&lt;</span>repeats <span class="token number">26</span> times<span class="token operator">&gt;</span>, __align <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我来解释下，上面的调试过程：</p><ol><li>通过 <code>info thread</code> 打印了所有的线程信息，可以看到有 3 个线程，一个是主线程（LWP 87746），另外两个都是我们自己创建的线程（LWP 87747 和 87748）；</li><li>通过 <code>thread 2</code>，将切换到第 2 个线程（LWP 87748）；</li><li>通过 <code>bt</code>，打印线程的调用栈信息，可以看到有 threadB_proc 函数，说明这个是线程 B 函数，也就说 LWP 87748 是线程 B;</li><li>通过 <code>frame 3</code>，打印调用栈中的第三个帧的信息，可以看到线程 B 函数，在获取互斥锁 A 的时候阻塞了；</li><li>通过 <code>p mutex_A</code>，打印互斥锁 A 对象信息，可以看到它被 LWP 为 87747（线程 A） 的线程持有着；</li><li>通过 <code>p mutex_B</code>，打印互斥锁 B 对象信息，可以看到他被 LWP 为 87748 （线程 B） 的线程持有着；</li></ol><p>因为线程 B 在等待线程 A 所持有的 mutex_A, 而同时线程 A 又在等待线程 B 所拥有的mutex_B, 所以可以断定该程序发生了死锁。</p><hr><h2 id="避免死锁问题的发生" tabindex="-1"><a class="header-anchor" href="#避免死锁问题的发生" aria-hidden="true">#</a> 避免死锁问题的发生</h2><p>前面我们提到，产生死锁的四个必要条件是：互斥条件、持有并等待条件、不可剥夺条件、环路等待条件。</p><p>那么避免死锁问题就只需要破环其中一个条件就可以，最常见的并且可行的就是<strong>使用资源有序分配法，来破环环路等待条件</strong>。</p><p>那什么是资源有序分配法呢？</p><p>线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B。也就是说，线程 A 和 线程 B 总是以相同的顺序申请自己想要的资源。</p><p>我们使用资源有序分配法的方式来修改前面发生死锁的代码，我们可以不改动线程 A 的代码。</p><p>我们先要清楚线程 A 获取资源的顺序，它是先获取互斥锁 A，然后获取互斥锁 B。</p><p>所以我们只需将线程 B 改成以相同顺序的获取资源，就可以打破死锁了。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307012113626.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>线程 B 函数改进后的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//线程 B 函数，同线程 A 一样，先获取互斥锁 A，然后获取互斥锁 B</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">threadB_proc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B waiting get ResourceA \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B got ResourceA \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B waiting  get ResourceB \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_B<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;thread B got ResourceB \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_B<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下，可以看，没有发生死锁。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>thread B waiting get ResourceA 
thread B got ResourceA 
thread A waiting get ResourceA 
thread B waiting  get ResourceB 
thread B got ResourceB 
thread A got ResourceA 
thread A waiting get ResourceB 
thread A got ResourceB
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>简单来说，死锁问题的产生是由两个或者以上线程并行执行的时候，争夺资源而互相等待造成的。</p><p>死锁只有同时满足互斥、持有并等待、不可剥夺、环路等待这四个条件的时候才会发生。</p><p>所以要避免死锁问题，就是要破坏其中一个条件即可，最常用的方法就是使用资源有序分配法来破坏环路等待条件。</p>`,74),i=[p];function o(c,l){return s(),a("div",null,i)}const d=n(e,[["render",o],["__file","5.4.html.vue"]]);export{d as default};
