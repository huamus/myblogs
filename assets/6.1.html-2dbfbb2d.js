import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as e}from"./app-5cd17e2a.js";const p={},n=e('<p>操作系统的知识点考察还是比较多的，大厂就爱问基础知识。其中，关于操作系统的「调度算法」考察也算比较频繁。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705398.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><h1 id="进程调度算法" tabindex="-1"><a class="header-anchor" href="#进程调度算法" aria-hidden="true">#</a> 进程调度算法</h1><p>进程调度算法也称 CPU 调度算法，毕竟进程是由 CPU 调度的。</p><p>当 CPU 空闲时，操作系统就选择内存中的某个「就绪状态」的进程，并给其分配 CPU。</p><p>什么时候会发生 CPU 调度呢？通常有以下情况：</p><ol><li>当进程从运行状态转到等待状态；</li><li>当进程从运行状态转到就绪状态；</li><li>当进程从等待状态转到就绪状态；</li><li>当进程从运行状态转到终止状态；</li></ol><p>其中发生在 1 和 4 两种情况下的调度称为「非抢占式调度」，2 和 3 两种情况下发生的调度称为「抢占式调度」。</p><p>非抢占式的意思就是，当进程正在运行时，它就会一直运行，直到该进程完成或发生某个事件而被阻塞时，才会把 CPU 让给其他进程。</p><p>而抢占式调度，顾名思义就是进程运行时，可以被打断，使其把 CPU 让给其他进程。那抢占的原则一般有三种，分别是时间片原则、优先权原则、短作业优先原则。</p><p>你可能会好奇为什么第 3 种情况也会发生 CPU 调度呢？假设有一个进程是处于等待状态的，但是它的优先级比较高，如果该进程等待的事件发生了，它就会转到就绪状态，一旦它转到就绪状态，如果我们的调度算法是以优先级来进行调度的，那么它就会立马抢占正在运行的进程，所以这个时候就会发生 CPU 调度。</p><p>那第 2 种状态通常是时间片到的情况，因为时间片到了就会发生中断，于是就会抢占正在运行的进程，从而占用 CPU。</p><p>调度算法影响的是等待时间（进程在就绪队列中等待调度的时间总和），而不能影响进程正在使用 CPU 的时间和 I/O 时间。</p><p>接下来，说说常见的调度算法：</p><ul><li>先来先服务调度算法</li><li>最短作业优先调度算法</li><li>高响应比优先调度算法</li><li>时间片轮转调度算法</li><li>最高优先级调度算法</li><li>多级反馈队列调度算法</li></ul><h2 id="先来先服务调度算法" tabindex="-1"><a class="header-anchor" href="#先来先服务调度算法" aria-hidden="true">#</a> 先来先服务调度算法</h2><p>最简单的一个调度算法，就是非抢占式的<strong>先来先服务（<em><strong><strong>First Come First Severd, FCFS</strong></strong></em>）算法</strong>了。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705143.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>顾名思义，先来后到，<strong>每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。</strong></p><p>这似乎很公平，但是当一个长作业先运行了，那么后面的短作业等待的时间就会很长，不利于短作业。</p><p>FCFS 对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I/O 繁忙型作业的系统。</p><h2 id="最短作业优先调度算法" tabindex="-1"><a class="header-anchor" href="#最短作业优先调度算法" aria-hidden="true">#</a> 最短作业优先调度算法</h2><p><strong>最短作业优先（<em><strong><strong>Shortest Job First, SJF</strong></strong></em>）调度算法</strong>，它会<strong>优先选择运行时间最短的进程来运行</strong>，这有助于提高系统的吞吐量。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1672561544014-b0adf250-9551-40a2-be41-dd8e4fbac10d.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这显然对长作业不利，很容易造成一种极端现象。</p><p>比如，一个长作业在就绪队列等待运行，而这个就绪队列有非常多的短作业，那么就会使得长作业不断的往后推，周转时间变长，致使长作业长期不会被运行。</p><h2 id="高响应比优先调度算法" tabindex="-1"><a class="header-anchor" href="#高响应比优先调度算法" aria-hidden="true">#</a> 高响应比优先调度算法</h2><p>前面的「先来先服务调度算法」和「最短作业优先调度算法」都没有很好的权衡短作业和长作业。</p><p>那么，<strong>高响应比优先 （<em><strong><strong>Highest Response Ratio Next, HRRN</strong></strong></em>）调度算法</strong>主要是权衡了短作业和长作业。</p><p><strong>每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行</strong>，「响应比优先级」的计算公式：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1672561544000-11790310-f66b-4d5d-941a-a85a84dff9f1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上面的公式，可以发现：</p><ul><li>如果两个进程的「等待时间」相同时，「要求的服务时间」越短，「响应比」就越高，这样短作业的进程容易被选中运行；</li><li>如果两个进程「要求的服务时间」相同时，「等待时间」越长，「响应比」就越高，这就兼顾到了长作业进程，因为进程的响应比可以随时间等待的增加而提高，当其等待时间足够长时，其响应比便可以升到很高，从而获得运行的机会；</li></ul><h2 id="时间片轮转调度算法" tabindex="-1"><a class="header-anchor" href="#时间片轮转调度算法" aria-hidden="true">#</a> 时间片轮转调度算法</h2><p>最古老、最简单、最公平且使用最广的算法就是<strong>时间片轮转（<em><strong><strong>Round Robin, RR</strong></strong></em>）调度算法</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705145.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>每个进程被分配一个时间段，称为时间片（<em><strong><strong>Quantum</strong></strong></em>），即允许该进程在该时间段中运行。</strong></p><ul><li>如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配另外一个进程；</li><li>如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；</li></ul><p>另外，时间片的长度就是一个很关键的点：</p><ul><li>如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；</li><li>如果设得太长又可能引起对短作业进程的响应时间变长。将</li></ul><p>通常时间片设为 20ms~50ms 通常是一个比较合理的折中值。</p><h2 id="最高优先级调度算法" tabindex="-1"><a class="header-anchor" href="#最高优先级调度算法" aria-hidden="true">#</a> 最高优先级调度算法</h2><p>前面的「时间片轮转算法」做了个假设，即让所有的进程同等重要，也不偏袒谁，大家的运行时间都一样。</p><p>但是，对于多用户计算机系统就有不同的看法了，它们希望调度是有优先级的，即希望调度程序能<strong>从就绪队列中选择最高优先级的进程进行运行，这称为最高优先级（<em><strong><strong>Highest Priority First，HPF</strong></strong></em>）调度算法</strong>。</p><p>进程的优先级可以分为，静态优先级或动态优先级：</p><ul><li>静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；</li><li>动态优先级：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是<strong>随着时间的推移增加等待进程的优先级</strong>。</li></ul><p>该算法也有两种处理优先级高的方法，非抢占式和抢占式：</p><ul><li>非抢占式：当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。</li><li>抢占式：当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。</li></ul><p>但是依然有缺点，可能会导致低优先级的进程永远不会运行。</p><h2 id="多级反馈队列调度算法" tabindex="-1"><a class="header-anchor" href="#多级反馈队列调度算法" aria-hidden="true">#</a> 多级反馈队列调度算法</h2><p><strong>多级反馈队列（<em><strong><strong>Multilevel Feedback Queue</strong></strong></em>）调度算法</strong>是「时间片轮转算法」和「最高优先级算法」的综合和发展。</p><p>顾名思义：</p><ul><li>「多级」表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短。</li><li>「反馈」表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列；</li></ul><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705157.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>来看看，它是如何工作的：</p><ul><li>设置了多个队列，赋予每个队列不同的优先级，每个<strong>队列优先级从高到低</strong>，同时<strong>优先级越高时间片越短</strong>；</li><li>新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；</li><li>当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；</li></ul><p>可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，虽然等待的时间变长了，但是运行时间也会更长了，所以该算法很好的<strong>兼顾了长短作业，同时有较好的响应时间。</strong></p><hr><h1 id="内存页面置换算法" tabindex="-1"><a class="header-anchor" href="#内存页面置换算法" aria-hidden="true">#</a> 内存页面置换算法</h1><p>在了解内存页面置换算法前，我们得先谈一下<strong>缺页异常（缺页中断）</strong>。</p><p>当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。那它与一般中断的主要区别在于：</p><ul><li>缺页中断在指令执行「期间」产生和处理中断信号，而一般中断在一条指令执行「完成」后检查和处理中断信号。</li><li>缺页中断返回到该指令的开始重新执行「该指令」，而一般中断返回到该指令的「下一个指令」执行。</li></ul><p>我们来看一下缺页中断的处理流程，如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705190.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>在 CPU 里访问一条 Load M 指令，然后 CPU 会去找 M 所对应的页表项。</li><li>如果该页表项的状态位是「有效的」，那 CPU 就可以直接去访问物理内存了，如果状态位是「无效的」，则 CPU 则会发送缺页中断请求。</li><li>操作系统收到了缺页中断，则会执行缺页中断处理函数，先会查找该页面在磁盘中的页面的位置。</li><li>找到磁盘中对应的页面后，需要把该页面换入到物理内存中，但是在换入前，需要在物理内存中找空闲页，如果找到空闲页，就把页面换入到物理内存中。</li><li>页面从磁盘换入到物理内存完成后，则把页表项中的状态位修改为「有效的」。</li><li>最后，CPU 重新执行导致缺页异常的指令。</li></ol><p>上面所说的过程，第 4 步是能在物理内存找到空闲页的情况，那如果找不到呢？</p><p>找不到空闲页的话，就说明此时内存已满了，这时候，就需要「页面置换算法」选择一个物理页，如果该物理页有被修改过（脏页），则把它换出到磁盘，然后把该被置换出去的页表项的状态改成「无效的」，最后把正在访问的页面装入到这个物理页中。</p><p>这里提一下，页表项通常有如下图的字段：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705269.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那其中：</p><ul><li><em>状态位</em>：用于表示该页是否有效，也就是说是否在物理内存中，供程序访问时参考。</li><li><em>访问字段</em>：用于记录该页在一段时间被访问的次数，供页面置换算法选择出页面时参考。</li><li><em>修改位</em>：表示该页在调入内存后是否有被修改过，由于内存中的每一页都在磁盘上保留一份副本，因此，如果没有修改，在置换该页时就不需要将该页写回到磁盘上，以减少系统的开销；如果已经被修改，则将该页重写到磁盘上，以保证磁盘中所保留的始终是最新的副本。</li><li><em>硬盘地址</em>：用于指出该页在硬盘上的地址，通常是物理块号，供调入该页时使用。</li></ul><p>这里我整理了虚拟内存的管理整个流程，你可以从下面这张图看到：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705529.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以，页面置换算法的功能是，<strong>当出现缺页异常，需调入新页面而内存已满时，选择被置换的物理页面</strong>，也就是说选择一个物理页面换出到磁盘，然后把需要访问的页面换入到物理页。</p><p>那其算法目标则是，尽可能减少页面换入换出的次数，常见的页面置换算法有如下几种：</p><ul><li>最佳页面置换算法（<em>OPT</em>）</li><li>先进先出置换算法（<em>FIFO</em>）</li><li>最近最久未使用的置换算法（<em>LRU</em>）</li><li>时钟页面置换算法（<em>Lock</em>）</li><li>最不常用置换算法（<em>LFU</em>）</li></ul><h2 id="最佳页面置换算法" tabindex="-1"><a class="header-anchor" href="#最佳页面置换算法" aria-hidden="true">#</a> 最佳页面置换算法</h2><p>最佳页面置换算法基本思路是，<strong>置换在「未来」最长时间不访问的页面</strong>。</p><p>所以，该算法实现需要计算内存中每个逻辑页面的「下一次」访问时间，然后比较，选择未来最长时间不访问的页面。</p><p>我们举个例子，假设一开始有 3 个空闲的物理页，然后有请求的页面序列，那它的置换过程如下图：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1672561546429-160019c3-51d0-47d5-9799-c9fc5c82385d.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这个请求的页面序列中，缺页共发生了 7 次（空闲页换入 3 次 + 最优页面置换 4 次），页面置换共发生了 4 次。</p><p>这很理想，但是实际系统中无法实现，因为程序访问页面时是动态的，我们是无法预知每个页面在「下一次」访问前的等待时间。</p><p>所以，最佳页面置换算法作用是为了衡量你的算法的效率，你的算法效率越接近该算法的效率，那么说明你的算法是高效的。</p><h2 id="先进先出置换算法" tabindex="-1"><a class="header-anchor" href="#先进先出置换算法" aria-hidden="true">#</a> 先进先出置换算法</h2><p>既然我们无法预知页面在下一次访问前所需的等待时间，那我们可以<strong>选择在内存驻留时间很长的页面进行置换</strong>，这个就是「先进先出置换」算法的思想。</p><p>还是以前面的请求的页面序列作为例子，假设使用先进先出置换算法，则过程如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705645.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这个请求的页面序列中，缺页共发生了 10 次，页面置换共发生了 7 次，跟最佳页面置换算法比较起来，性能明显差了很多。</p><h2 id="最近最久未使用的置换算法" tabindex="-1"><a class="header-anchor" href="#最近最久未使用的置换算法" aria-hidden="true">#</a> 最近最久未使用的置换算法</h2><p>最近最久未使用（<em>LRU</em>）的置换算法的基本思路是，发生缺页时，<strong>选择最长时间没有被访问的页面进行置换</strong>，也就是说，该算法假设已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用。</p><p>这种算法近似最优置换算法，最优置换算法是通过「未来」的使用情况来推测要淘汰的页面，而 LRU 则是通过「历史」的使用情况来推测要淘汰的页面。</p><p>还是以前面的请求的页面序列作为例子，假设使用最近最久未使用的置换算法，则过程如下图：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1672561547052-5f7dc51b-9d0c-4352-92fe-2fe66431a0cf.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这个请求的页面序列中，缺页共发生了 9 次，页面置换共发生了 6 次，跟先进先出置换算法比较起来，性能提高了一些。</p><p>虽然 LRU 在理论上是可以实现的，但代价很高。为了完全实现 LRU，需要在内存中维护一个所有页面的链表，最近最多使用的页面在表头，最近最少使用的页面在表尾。</p><p>困难的是，在每次访问内存时都必须要更新「整个链表」。在链表中找到一个页面，删除它，然后把它移动到表头是一个非常费时的操作。</p><p>所以，LRU 虽然看上去不错，但是由于开销比较大，实际应用中比较少使用。</p><h2 id="时钟页面置换算法" tabindex="-1"><a class="header-anchor" href="#时钟页面置换算法" aria-hidden="true">#</a> 时钟页面置换算法</h2><p>那有没有一种即能优化置换的次数，也能方便实现的算法呢？</p><p>时钟页面置换算法就可以两者兼得，它跟 LRU 近似，又是对 FIFO 的一种改进。</p><p>该算法的思路是，把所有的页面都保存在一个类似钟面的「环形链表」中，一个表针指向最老的页面。</p><p>当发生缺页中断时，算法首先检查表针指向的页面：</p><ul><li>如果它的访问位位是 0 就淘汰该页面，并把新的页面插入这个位置，然后把表针前移一个位置；</li><li>如果访问位是 1 就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0 的页面为止；</li></ul><p>我画了一副时钟页面置换算法的工作流程图，你可以在下方看到：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705705.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>了解了这个算法的工作方式，就明白为什么它被称为时钟（<em>Clock</em>）算法了。</p><h2 id="最不常用算法" tabindex="-1"><a class="header-anchor" href="#最不常用算法" aria-hidden="true">#</a> 最不常用算法</h2><p>最不常用（<em>LFU</em>）算法，这名字听起来很调皮，但是它的意思不是指这个算法不常用，而是<strong>当发生缺页中断时，选择「访问次数」最少的那个页面，并将其淘汰</strong>。</p><p>它的实现方式是，对每个页面设置一个「访问计数器」，每当一个页面被访问时，该页面的访问计数器就累加 1。在发生缺页中断时，淘汰计数器值最小的那个页面。</p><p>看起来很简单，每个页面加一个计数器就可以实现了，但是在操作系统中实现的时候，我们需要考虑效率和硬件成本的。</p><p>要增加一个计数器来实现，这个硬件成本是比较高的，另外如果要对这个计数器查找哪个页面访问次数最小，查找链表本身，如果链表长度很大，是非常耗时的，效率不高。</p><p>但还有个问题，LFU 算法只考虑了频率问题，没考虑时间的问题，比如有些页面在过去时间里访问的频率很高，但是现在已经没有访问了，而当前频繁访问的页面由于没有这些页面访问的次数高，在发生缺页中断时，就会可能会误伤当前刚开始频繁访问，但访问次数还不高的页面。</p><p>那这个问题的解决的办法还是有的，可以定期减少访问的次数，比如当发生时间中断时，把过去时间访问的页面的访问次数除以 2，也就说，随着时间的流失，以前的高访问次数的页面会慢慢减少，相当于加大了被置换的概率。</p><hr><h1 id="磁盘调度算法" tabindex="-1"><a class="header-anchor" href="#磁盘调度算法" aria-hidden="true">#</a> 磁盘调度算法</h1><p>我们来看看磁盘的结构，如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705740.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>常见的机械磁盘是上图左边的样子，中间圆的部分是磁盘的盘片，一般会有多个盘片，每个盘面都有自己的磁头。右边的图就是一个盘片的结构，盘片中的每一层分为多个磁道，每个磁道分多个扇区，每个扇区是 512 字节。那么，多个具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面，如上图里中间的样子。</p><p>磁盘调度算法的目的很简单，就是为了提高磁盘的访问性能，一般是通过优化磁盘的访问请求顺序来做到的。</p><p>寻道的时间是磁盘访问最耗时的部分，如果请求顺序优化的得当，必然可以节省一些不必要的寻道时间，从而提高磁盘的访问性能。</p><p>假设有下面一个请求序列，每个数字代表磁道的位置：</p><p>98，183，37，122，14，124，65，67</p><p>初始磁头当前的位置是在第 53 磁道。</p><p>接下来，分别对以上的序列，作为每个调度算法的例子，那常见的磁盘调度算法有：</p><ul><li>先来先服务算法</li><li>最短寻道时间优先算法</li><li>扫描算法</li><li>循环扫描算法</li><li>LOOK 与 C-LOOK 算法</li></ul><h2 id="先来先服务" tabindex="-1"><a class="header-anchor" href="#先来先服务" aria-hidden="true">#</a> 先来先服务</h2><p>先来先服务（<em>First-Come，First-Served，FCFS</em>），顾名思义，先到来的请求，先被服务。</p><p>那按照这个序列的话：</p><p>98，183，37，122，14，124，65，67</p><p>那么，磁盘的写入顺序是从左到右，如下图：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1672561547966-59627e9d-5159-402c-ad11-bf9010a0b162.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>先来先服务算法总共移动了 640 个磁道的距离，这么一看这种算法，比较简单粗暴，但是如果大量进程竞争使用磁盘，请求访问的磁道可能会很分散，那先来先服务算法在性能上就会显得很差，因为寻道时间过长。</p><h2 id="最短寻道时间优先" tabindex="-1"><a class="header-anchor" href="#最短寻道时间优先" aria-hidden="true">#</a> 最短寻道时间优先</h2><p>最短寻道时间优先（<em>Shortest Seek First，SSF</em>）算法的工作方式是，优先选择从当前磁头位置所需寻道时间最短的请求，还是以这个序列为例子：</p><p>98，183，37，122，14，124，65，67</p><p>那么，那么根据距离磁头（ 53 位置）最近的请求的算法，具体的请求则会是下列从左到右的顺序：</p><p>65，67，37，14，98，122，124，183</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705517.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>磁头移动的总距离是 236 磁道，相比先来先服务性能提高了不少。</p><p>但这个算法可能存在某些请求的<strong>饥饿</strong>，因为本次例子我们是静态的序列，看不出问题，假设是一个动态的请求，如果后续来的请求都是小于 183 磁道的，那么 183 磁道可能永远不会被响应，于是就产生了饥饿现象，这里<strong>产生饥饿的原因是磁头在一小块区域来回移动</strong>。</p><h2 id="扫描算法" tabindex="-1"><a class="header-anchor" href="#扫描算法" aria-hidden="true">#</a> 扫描算法</h2><p>最短寻道时间优先算法会产生饥饿的原因在于：磁头有可能再一个小区域内来回得移动。</p><p>为了防止这个问题，可以规定：<strong>磁头在一个方向上移动，访问所有未完成的请求，直到磁头到达该方向上的最后的磁道，才调换方向，这就是扫描（<em><strong><strong>Scan</strong></strong></em>）算法</strong>。</p><p>这种算法也叫做电梯算法，比如电梯保持按一个方向移动，直到在那个方向上没有请求为止，然后改变方向。</p><p>还是以这个序列为例子，磁头的初始位置是 53：</p><p>98，183，37，122，14，124，65，67</p><p>那么，假设扫描调度算先朝磁道号减少的方向移动，具体请求则会是下列从左到右的顺序：</p><p>37，14，0，65，67，98，122，124，183</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705070.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>磁头先响应左边的请求，直到到达最左端（ 0 磁道）后，才开始反向移动，响应右边的请求。</p><p>扫描调度算法性能较好，不会产生饥饿现象，但是存在这样的问题，中间部分的磁道会比较占便宜，中间部分相比其他部分响应的频率会比较多，也就是说每个磁道的响应频率存在差异。</p><h2 id="循环扫描算法" tabindex="-1"><a class="header-anchor" href="#循环扫描算法" aria-hidden="true">#</a> 循环扫描算法</h2><p>扫描算法使得每个磁道响应的频率存在差异，那么要优化这个问题的话，可以总是按相同的方向进行扫描，使得每个磁道的响应频率基本一致。</p><p>循环扫描（<em>Circular Scan, CSCAN</em> ）规定：只有磁头朝某个特定方向移动时，才处理磁道访问请求，而返回时直接快速移动至最靠边缘的磁道，也就是复位磁头，这个过程是很快的，并且<strong>返回中途不处理任何请求</strong>，该算法的特点，就是<strong>磁道只响应一个方向上的请求</strong>。</p><p>还是以这个序列为例子，磁头的初始位置是 53：</p><p>98，183，37，122，14，124，65，67</p><p>那么，假设循环扫描调度算先朝磁道增加的方向移动，具体请求会是下列从左到右的顺序：</p><p>65，67，98，122，124，183，199，0，14，37</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705405.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>磁头先响应了右边的请求，直到碰到了最右端的磁道 199，就立即回到磁盘的开始处（磁道 0），但这个返回的途中是不响应任何请求的，直到到达最开始的磁道后，才继续顺序响应右边的请求。</p><p>循环扫描算法相比于扫描算法，对于各个位置磁道响应频率相对比较平均。</p><h2 id="look-与-c-look算法" tabindex="-1"><a class="header-anchor" href="#look-与-c-look算法" aria-hidden="true">#</a> LOOK 与 C-LOOK算法</h2><p>我们前面说到的扫描算法和循环扫描算法，都是磁头移动到磁盘「最始端或最末端」才开始调换方向。</p><p>那这其实是可以优化的，优化的思路就是<strong>磁头在移动到「最远的请求」位置，然后立即反向移动。</strong></p><p>那针对 SCAN 算法的优化则叫 LOOK 算法，它的工作方式，磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，<strong>反向移动的途中会响应请求</strong>。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1672561549051-09521957-ec24-41c2-a7eb-2790c4a1e491.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>而针 C-SCAN 算法的优化则叫 C-LOOK，它的工作方式，磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，<strong>反向移动的途中不会响应请求</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010705931.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',170),r=[n];function g(o,l){return a(),t("div",null,r)}const d=i(p,[["render",g],["__file","6.1.html.vue"]]);export{d as default};
