import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c as p,a,b as n,d as r,f as o}from"./app-b18a8720.js";const c={},l={href:"https://xiaolincoding.com/",target:"_blank",rel:"noopener noreferrer"},u=a("p",null,"作者：小林coding",-1),d=o(`<p>在工作中，如果我们想提高一条语句查询速度，通常都会想对字段建立索引。</p><p>但是索引并不是万能的。建立了索引，并不意味着任何查询语句都能走索引扫描。</p><p>稍不注意，可能你写的查询语句是会导致索引失效，从而走了全表扫描，虽然查询的结果没问题，但是查询的性能大大降低。</p><h2 id="索引存储结构长什么样" tabindex="-1"><a class="header-anchor" href="#索引存储结构长什么样" aria-hidden="true">#</a> 索引存储结构长什么样？</h2><p>索引的存储结构跟 MySQL 使用哪种存储引擎有关，因为存储引擎就是负责将数据持久化在磁盘中，而不同的存储引擎采用的索引数据结构也会不相同。</p><p>MySQL 默认的存储引擎是 InnoDB，它采用 B+Tree 作为索引的数据结构。</p><p>在创建表时，InnoDB 存储引擎默认会创建一个主键索引，也就是聚簇索引，其它索引都属于二级索引。</p><p>虽然，InnoDB 和 MyISAM 都支持 B+ 树索引，但是它们数据的存储结构实现方式不同。不同之处在于：</p><ul><li>InnoDB 存储引擎：B+ 树索引的叶子节点保存数据本身；</li><li>MyISAM 存储引擎：B+ 树索引的叶子节点保存数据的物理地址；</li></ul><p>接下来，我举个例子，给大家展示下这两种存储引擎的索引存储结构的区别。</p><p>这里有一张 t_user 表，其中 id 字段为主键索引，其他都是普通字段。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503829.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果使用的是 MyISAM 存储引擎，B+ 树索引的叶子节点保存数据的物理地址，即用户数据的指针，如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503844.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果使用的是 InnoDB 存储引擎， B+ 树索引的叶子节点保存数据本身，如下图所示（图中叶子节点之间脑补成双向链表就行）。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503792.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>InnoDB 存储引擎根据索引类型不同，分为聚簇索引（上图就是聚簇索引）和二级索引。它们区别在于，聚簇索引的叶子节点存放的是实际数据，所有完整的用户数据都存放在聚簇索引的叶子节点，而二级索引的叶子节点存放的是主键值，而不是实际数据。</p><p>如果将 name 字段设置为普通索引，那么这个二级索引长下图这样（图中叶子节点之间脑补成双向链表就行），<strong>叶子节点仅存放主键值</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503854.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>知道了 InnoDB 存储引擎的聚簇索引和二级索引的存储结构后，接下来举几个查询语句，说下查询过程是怎么选择用哪个索引类型的。</p><p>在我们使用「主键索引」字段作为条件查询的时候，如果要查询的数据都在「聚簇索引」的叶子节点里，那么就会在「聚簇索引」中的 B+ 树检索到对应的叶子节点，然后直接读取要查询的数据。如下面这条语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// id 字段为主键索引</span>
select <span class="token operator">*</span> from t_user where id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们使用「二级索引」字段作为条件查询的时候，如果要查询的数据都在「聚簇索引」的叶子节点里，那么需要检索两颗B+树：</p><ul><li>先在「二级索引」的 B+ 树找到对应的叶子节点，获取主键值；</li><li>然后用上一步获取的主键值，在「聚簇索引」中的 B+ 树检索到对应的叶子节点，然后获取要查询的数据。</li></ul><p>上面这个过程叫做<strong>回表</strong>，如下面这条语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// name 字段为二级索引</span>
select <span class="token operator">*</span> from t_user where name<span class="token operator">=</span><span class="token string">&quot;林某&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们使用「二级索引」字段作为条件查询的时候，如果要查询的数据在「二级索引」的叶子节点，那么只需要在「二级索引」的 B+ 树找到对应的叶子节点，然后读取要查询的数据，这个过程叫做<strong>覆盖索引</strong>。如下面这条语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// name 字段为二级索引</span>
select id from t_user where name<span class="token operator">=</span><span class="token string">&quot;林某&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这些查询语句的条件都用到了索引列，所以在查询过程都用上了索引。</p><p>但是并不意味着，查询条件用上了索引列，就查询过程就一定都用上索引，接下来我们再一起看看哪些情况会导致索引失效，而发生全表扫描。</p><p>首先说明下，下面的实验案例，我使用的 MySQL 版本为 8.0.26。</p><h2 id="对索引使用左或者左右模糊匹配" tabindex="-1"><a class="header-anchor" href="#对索引使用左或者左右模糊匹配" aria-hidden="true">#</a> 对索引使用左或者左右模糊匹配</h2><p>当我们使用左或者左右模糊匹配的时候，也就是 like %xx 或者 like %xx% 这两种方式都会造成索引失效。</p><p>比如下面的 like 语句，查询 name 后缀为「林」的用户，执行计划中的 type=ALL 就代表了全表扫描，而没有走索引。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// name 字段为二级索引</span>
select <span class="token operator">*</span> from t_user where name like <span class="token char">&#39;%林&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503884.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果是查询 name 前缀为林的用户，那么就会走索引扫描，执行计划中的 type=range 表示走索引扫描，key=index_name 看到实际走了 index_name 索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// name 字段为二级索引</span>
select <span class="token operator">*</span> from t_user where name like <span class="token char">&#39;林%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504280.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么 like 关键字左或者左右模糊匹配无法走索引呢？</p><p><strong>因为索引 B+ 树是按照「索引值」有序排列存储的，只能根据前缀进行比较。</strong></p><p>举个例子，下面这张二级索引图（图中叶子节点之间脑补成双向链表就行），是以 name 字段有序排列存储的。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503037.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假设我们要查询 name 字段前缀为「林」的数据，也就是 name like &#39;林%&#39;，扫描索引的过程：</p><ul><li>首节点查询比较：林这个字的拼音大小比首节点的第一个索引值中的陈字大，但是比首节点的第二个索引值中的周字小，所以选择去节点2继续查询；</li><li>节点 2 查询比较：节点2的第一个索引值中的陈字的拼音大小比林字小，所以继续看下一个索引值，发现节点2有与林字前缀匹配的索引值，于是就往叶子节点查询，即叶子节点4；</li><li>节点 4 查询比较：节点4的第一个索引值的前缀符合林字，于是就读取该行数据，接着继续往右匹配，直到匹配不到前缀为林的索引值。</li></ul><p>如果使用 name like &#39;%林&#39; 方式来查询，因为查询的结果可能是「陈林、张林、周林」等之类的，所以不知道从哪个索引值开始比较，于是就只能通过全表扫描的方式来查询。</p><h2 id="对索引使用函数" tabindex="-1"><a class="header-anchor" href="#对索引使用函数" aria-hidden="true">#</a> 对索引使用函数</h2><p>有时候我们会用一些 MySQL 自带的函数来得到我们想要的结果，这时候要注意了，如果查询条件中对索引字段使用函数，就会导致索引失效。</p><p>比如下面这条语句查询条件中对 name 字段使用了 LENGTH 函数，执行计划中的 type=ALL，代表了全表扫描：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// name 为二级索引</span>
select <span class="token operator">*</span> from t_user where <span class="token function">length</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503134.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么对索引使用函数，就无法走索引了呢？</p><p><strong>因为索引保存的是索引字段的原始值，而不是经过函数计算后的值，自然就没办法走索引了。</strong></p><p><strong>不过，从 MySQL 8.0 开始，索引特性增加了函数索引，即可以针对函数计算后的值建立一个索引，也就是说该索引的值是函数计算后的值，所以就可以通过扫描索引来查询数据。</strong></p><p>举个例子，我通过下面这条语句，对 length(name) 的计算结果建立一个名为 idx_name_length 的索引。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>alter table t_user add key idx_name_length <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我再用下面这条查询语句，这时候就会走索引了。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504643.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="对索引进行表达式计算" tabindex="-1"><a class="header-anchor" href="#对索引进行表达式计算" aria-hidden="true">#</a> 对索引进行表达式计算</h2><p>在查询条件中对索引进行表达式计算，也是无法走索引的。</p><p>比如，下面这条查询语句，执行计划中 type = ALL，说明是通过全表扫描的方式查询数据的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>explain select <span class="token operator">*</span> from t_user where id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503579.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是，如果把查询语句的条件改成 where id = 10 - 1，这样就不是在索引字段进行表达式计算了，于是就可以走索引查询了。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504571.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么对索引进行表达式计算，就无法走索引了呢？</p><p>原因跟对索引使用函数差不多。</p><p>因为索引保存的是索引字段的原始值，而不是 id + 1 表达式计算后的值，所以无法走索引，只能通过把索引字段的取值都取出来，然后依次进行表达式的计算来进行条件判断，因此采用的就是全表扫描的方式。</p><p>有的同学可能会说，这种对索引进行简单的表达式计算，在代码特殊处理下，应该是可以做到索引扫描的，比方将 id + 1 = 10 变成 id = 10 - 1。</p><p>是的，是能够实现，但是 MySQL 还是偷了这个懒，没有实现。</p><p>我的想法是，可能也是因为，表达式计算的情况多种多样，每种都要考虑的话，代码可能会很臃肿，所以干脆将这种索引失效的场景告诉程序员，让程序员自己保证在查询条件中不要对索引进行表达式计算。</p><h2 id="对索引隐式类型转换" tabindex="-1"><a class="header-anchor" href="#对索引隐式类型转换" aria-hidden="true">#</a> 对索引隐式类型转换</h2><p><strong>如果索引字段是字符串类型，但是在条件查询中，输入的参数是整型的话，你会在执行计划的结果发现这条语句会走全表扫描。</strong></p><p>我在原本的 t_user 表增加了 phone 字段，是二级索引且类型是 varchar。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503244.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后我在条件查询中，用整型作为输入参数，此时执行计划中 type = ALL，所以是通过全表扫描来查询数据的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from t_user where phone <span class="token operator">=</span> <span class="token number">1300000001</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504595.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是<strong>如果索引字段是整型类型，查询条件中的输入参数即使字符串，是不会导致索引失效，还是可以走索引扫描。</strong></p><p>我们再看第二个例子，id 是整型，但是下面这条语句还是走了索引扫描的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>explain select <span class="token operator">*</span> from t_user where id <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504428.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么第一个例子会导致索引失效，而第二例子不会呢？</p><p>要明白这个原因，首先我们要知道 MySQL 的数据类型转换规则是什么？就是看 MySQL 是会将字符串转成数字处理，还是将数字转换成字符串处理。</p><p>我在看《mysql45讲的时候》看到一个简单的测试方式，就是通过 select “10” &gt; 9 的结果来知道MySQL 的数据类型转换规则是什么：</p><ul><li>如果规则是 MySQL 会将自动「字符串」转换成「数字」，就相当于 select 10 &gt; 9，这个就是数字比较，所以结果应该是 1；</li><li>如果规则是 MySQL 会将自动「数字」转换成「字符串」，就相当于 select &quot;10&quot; &gt; &quot;9&quot;，这个是字符串比较，字符串比较大小是逐位从高位到低位逐个比较（按ascii码） ，那么&quot;10&quot;字符串相当于 “1”和“0”字符的组合，所以先是拿 “1” 字符和 “9” 字符比较，因为 “1” 字符比 “9” 字符小，所以结果应该是 0。</li></ul><p>在 MySQL 中，执行的结果如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504702.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面的结果为 1，说明 <strong>MySQL 在遇到字符串和数字比较的时候，会自动把字符串转为数字，然后再进行比较</strong>。</p><p>前面的例子一中的查询语句，我也跟大家说了是会走全表扫描：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//例子一的查询语句</span>
select <span class="token operator">*</span> from t_user where phone <span class="token operator">=</span> <span class="token number">1300000001</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 phone 字段为字符串，所以 MySQL 要会自动把字符串转为数字，所以这条语句相当于：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from t_user where <span class="token function">CAST</span><span class="token punctuation">(</span>phone <span class="token constant">AS</span> signed <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1300000001</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，<strong>CAST 函数是作用在了 phone 字段，而 phone 字段是索引，也就是对索引使用了函数！而前面我们也说了，对索引使用函数是会导致索引失效的</strong>。</p><p>例子二中的查询语句，我跟大家说了是会走索引扫描：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//例子二的查询语句</span>
select <span class="token operator">*</span> from t_user where id <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时因为字符串部分是输入参数，也就需要将字符串转为数字，所以这条语句相当于：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from t_user where id <span class="token operator">=</span> <span class="token function">CAST</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token constant">AS</span> signed <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，索引字段并没有用任何函数，CAST 函数是用在了输入参数，因此是可以走索引扫描的。</p><h2 id="联合索引非最左匹配" tabindex="-1"><a class="header-anchor" href="#联合索引非最左匹配" aria-hidden="true">#</a> 联合索引非最左匹配</h2><p>对主键字段建立的索引叫做聚簇索引，对普通字段建立的索引叫做二级索引。</p><p>那么<strong>多个普通字段组合在一起创建的索引就叫做联合索引</strong>，也叫组合索引。</p><p>创建联合索引时，我们需要注意创建时的顺序问题，因为联合索引 (a, b, c) 和 (c, b, a) 在使用的时候会存在差别。</p><p><strong>联合索引要能正确使用需要遵循<strong><strong>最左匹配原则</strong></strong>，也就是按照最左优先的方式进行索引的匹配。</strong></p><p>比如，如果创建了一个 (a, b, c) 联合索引，如果查询条件是以下这几种，就可以匹配上联合索引：</p><ul><li>where a=1；</li><li>where a=1 and b=2 and c=3；</li><li>where a=1 and b=2；</li></ul><p>需要注意的是，<strong>因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要，但是得有a索引才能用上，因为 b 和 c 都是基于 a 的相对有序。</strong></p><p>但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b=2；</li><li>where c=3；</li><li>where b=2 and c=3；</li></ul><p>有一个比较特殊的查询条件：where a = 1 and c = 3 ，符合最左匹配吗？</p><p>这种其实严格意义上来说是属于索引截断，不同版本处理方式也不一样。</p><p>MySQL 5.5 的话，前面 a 会走索引，在联合索引找到主键值后，开始回表，到主键索引读取数据行，Server 层从存储引擎层获取到数据行后，然后在 Server 层再比对 c 字段的值。</p><p>从 MySQL 5.6 之后，有一个<strong>索引下推功能</strong>，可以在存储引擎层进行索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，再返还给 Server 层，从而减少回表次数。</p><p>索引下推的大概原理是：截断的字段不会在 Server 层进行条件判断，而是会被下推到「存储引擎层」进行条件判断（因为 c 字段的值是在 (a, b, c) 联合索引里的），然后过滤出符合条件的数据后再返回给 Server 层。由于在引擎层就过滤掉大量的数据，无需再回表读取数据来进行判断，减少回表次数，从而提升了性能。</p><p>比如下面这条 where a = 1 and c = 0 语句，我们可以从执行计划中的 Extra=Using index condition 使用了索引下推功能。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503164.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么联合索引不遵循最左匹配原则就会失效？</p><p>原因是，<strong>在联合索引的情况下，数据是按照索引第一列排序，第一列数据相同时才会按照第二列排序。</strong></p><p>也就是说，如果我们想使用联合索引中尽可能多的列，查询条件中的各个列必须是联合索引中从最左边开始连续的列。如果我们仅仅按照第二列搜索，肯定无法走索引。</p><h2 id="where-子句中的-or" tabindex="-1"><a class="header-anchor" href="#where-子句中的-or" aria-hidden="true">#</a> WHERE 子句中的 OR</h2><p>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</p><p>举个例子，比如下面的查询语句，id 是主键，age 是普通列，从执行计划的结果看，是走了全表扫描。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from t_user where id <span class="token operator">=</span> <span class="token number">1</span> or age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071504390.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这是因为 <strong>OR 的含义就是两个只要满足一个即可，因此只有一个条件列是索引列是没有意义的，只要有条件列不是索引列，就会进行全表扫描。</strong></p><p>要解决办法很简单，将 age 字段设置为索引即可。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202308071503612.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到 type=index merge， index merge 的意思就是对 id 和 age 分别进行了扫描，然后将这两个结果集进行了合并，这样做的好处就是避免了全表扫描。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天给大家介绍了 6 种会发生索引失效的情况：</p><ul><li>当我们使用左或者左右模糊匹配的时候，也就是 like %xx 或者 like %xx%这两种方式都会造成索引失效；</li><li>当我们在查询条件中对索引列使用函数，就会导致索引失效。</li><li>当我们在查询条件中对索引列进行表达式计算，也是无法走索引的。</li><li>MySQL 在遇到字符串和数字比较的时候，会自动把字符串转为数字，然后再进行比较。如果字符串是索引列，而条件语句中的输入参数是数字的话，那么索引列会发生隐式类型转换，由于隐式类型转换是通过 CAST 函数实现的，等同于对索引列使用了函数，所以就会导致索引失效。</li><li>联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。</li><li>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</li></ul>`,131);function g(m,h){const e=i("ExternalLinkIcon");return t(),p("div",null,[a("blockquote",null,[a("p",null,[n("原文链接："),a("a",l,[n("https://xiaolincoding.com/"),r(e)])]),u]),d])}const f=s(c,[["render",g],["__file","4.html.vue"]]);export{f as default};
