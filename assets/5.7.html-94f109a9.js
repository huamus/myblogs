import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,f as p}from"./app-f8d5f6b3.js";const l={},r=n("p",null,"大家好，我是小林。",-1),u={href:"https://xiaolincoding.com/os/4_process/process_base.html",target:"_blank",rel:"noopener noreferrer"},d=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010644785.png",alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),k=n("p",null,[s("很多同学就好奇，"),n("strong",null,"为什么 C/C++ 语言里，线程崩溃后，进程也会崩溃，而 Java 语言里却不会呢？")],-1),v={href:"https://mp.weixin.qq.com/s/JnlTdUk8Jvao8L6FAtKqhQ",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"美团面试题：为什么线程崩溃崩溃不会导致 JVM 崩溃?",-1),g=p(`<p>我觉得写的很好，所以分享给大家一起拜读拜读，本文分以下几节来探讨：</p><ol><li>线程崩溃，进程一定会崩溃吗</li><li>进程是如何崩溃的-信号机制简介</li><li>为什么在 JVM 中线程崩溃不会导致 JVM 进程崩溃</li><li>openJDK 源码解析</li></ol><h2 id="线程崩溃-进程一定会崩溃吗" tabindex="-1"><a class="header-anchor" href="#线程崩溃-进程一定会崩溃吗" aria-hidden="true">#</a> 线程崩溃，进程一定会崩溃吗</h2><p>一般来说如果线程是因为非法访问内存引起的崩溃，那么进程肯定会崩溃，为什么系统要让进程崩溃呢，这主要是因为在进程中，<strong>各个线程的地址空间是共享的</strong>，既然是共享，那么某个线程对地址的非法访问就会导致内存的不确定性，进而可能会影响到其他线程，这种操作是危险的，操作系统会认为这很可能导致一系列严重的后果，于是干脆让整个进程崩溃</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010644772.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>线程共享代码段，数据段，地址空间，文件非法访问内存有以下几种情况，我们以 C 语言举例来看看。</p><p>1.、针对只读内存写入数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
   
   <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
      <span class="token comment">// 向只读内存写入数据，崩溃</span>
      s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;H&#39;</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、访问了进程没有权限访问的地址空间（比如内核空间）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

   <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xC0000fff</span><span class="token punctuation">;</span>
      <span class="token comment">// 针对进程的内核空间写入数据，崩溃</span>
      <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 32 位虚拟地址空间中，p 指向的是内核空间，显然不具有写入权限，所以上述赋值操作会导致崩溃</p><p>3、访问了不存在的内存，比如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
   
   <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上错误都是访问内存时的错误，所以统一会报 Segment Fault 错误（即段错误），这些都会导致进程崩溃</p><h2 id="进程是如何崩溃的-信号机制简介" tabindex="-1"><a class="header-anchor" href="#进程是如何崩溃的-信号机制简介" aria-hidden="true">#</a> 进程是如何崩溃的-信号机制简介</h2><p>那么线程崩溃后，进程是如何崩溃的呢，这背后的机制到底是怎样的，答案是<strong>信号</strong>。</p><p>大家想想要干掉一个正在运行的进程是不是经常用 kill -9 pid 这样的命令，这里的 kill 其实就是给指定 pid 发送终止信号的意思，其中的 9 就是信号。</p><p>其实信号有很多类型的，在 Linux 中可以通过 kill -l查看所有可用的信号：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010644832.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当然了发 kill 信号必须具有一定的权限，否则任意进程都可以通过发信号来终止其他进程，那显然是不合理的，实际上 kill 执行的是系统调用，将控制权转移给了内核（操作系统），由内核来给指定的进程发送信号</p><p>那么发个信号进程怎么就崩溃了呢，这背后的原理到底是怎样的？</p><p>其背后的机制如下</p><ol><li>CPU 执行正常的进程指令</li><li>调用 kill 系统调用向进程发送信号</li><li>进程收到操作系统发的信号，CPU 暂停当前程序运行，并将控制权转交给操作系统</li><li>调用 kill 系统调用向进程发送信号（假设为 11，即 SIGSEGV，一般非法访问内存报的都是这个错误）</li><li><strong>操作系统根据情况执行相应的信号处理程序（函数），一般执行完信号处理程序逻辑后会让进程退出</strong></li></ol><p>注意上面的第五步，如果进程没有注册自己的信号处理函数，那么操作系统会执行默认的信号处理程序（一般最后会让进程退出），但如果注册了，则会执行自己的信号处理函数，这样的话就给了进程一个垂死挣扎的机会，它收到 kill 信号后，可以调用 exit() 来退出，<strong>但也可以使用 sigsetjmp，siglongjmp 这两个函数来恢复进程的执行</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 自定义信号处理函数示例</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token comment">// 自定义信号处理函数，处理自定义逻辑后再调用 exit 退出</span>
<span class="token keyword">void</span> <span class="token function">sigHandler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Signal %d catched!\\n&quot;</span><span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">signal</span><span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">,</span> sigHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xC0000fff</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 针对不属于进程的内核空间写入数据，崩溃</span>
<span class="token punctuation">}</span>

<span class="token comment">// 以上结果输出: Signal 11 catched!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如代码所示</strong>：注册信号处理函数后，当收到 SIGSEGV 信号后，先执行相关的逻辑再退出</p><p>另外当进程接收信号之后也可以不定义自己的信号处理函数，而是选择忽略信号，如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 忽略信号</span>
  <span class="token function">signal</span><span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 产生一个 SIGSEGV 信号</span>
  <span class="token function">raise</span><span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;正常结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说虽然给进程发送了 kill 信号，但如果进程自己定义了信号处理函数或者无视信号就有机会逃出生天，当然了 kill -9 命令例外，不管进程是否定义了信号处理函数，都会马上被干掉。</p><p>说到这大家是否想起了一道经典面试题：<strong>如何让正在运行的 Java 工程的优雅停机？</strong></p><p>通过上面的介绍大家不难发现，其实是 JVM 自己定义了信号处理函数，这样当发送 kill pid 命令（默认会传 15 也就是 SIGTERM）后，JVM 就可以在信号处理函数中执行一些资源清理之后再调用 exit 退出。</p><p>这种场景显然不能用 kill -9，不然一下把进程干掉了资源就来不及清除了。</p><h2 id="为什么线程崩溃不会导致-jvm-进程崩溃" tabindex="-1"><a class="header-anchor" href="#为什么线程崩溃不会导致-jvm-进程崩溃" aria-hidden="true">#</a> 为什么线程崩溃不会导致 JVM 进程崩溃</h2><p>现在我们再来看看开头这个问题，相信你多少会心中有数，想想看在 Java 中有哪些是常见的由于非法访问内存而产生的 Exception 或 error 呢，常见的是大家熟悉的 StackoverflowError 或者 NPE（NullPointerException）,NPE 我们都了解，属于是访问了不存在的内存。</p><p>但为什么栈溢出（Stackoverflow）也属于非法访问内存呢，这得简单聊一下进程的虚拟空间，也就是前面提到的共享地址空间。</p><p>现代操作系统为了保护进程之间不受影响，所以使用了虚拟地址空间来隔离进程，进程的寻址都是针对虚拟地址，每个进程的虚拟空间都是一样的，而线程会共用进程的地址空间。</p><p>以 32 位虚拟空间，进程的虚拟空间分布如下：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1685105872557-827857b6-921e-481b-823a-81884c246a06.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那么 stackoverflow 是怎么发生的呢？</p><p>进程每调用一个函数，都会分配一个栈桢，然后在栈桢里会分配函数里定义的各种局部变量。</p><p>假设现在调用了一个无限递归的函数，那就会持续分配栈帧，但 stack 的大小是有限的（Linux 中默认为 8 M，可以通过 ulimit -a 查看），如果无限递归很快栈就会分配完了，此时再调用函数试图分配超出栈的大小内存，就会发生段错误，也就是 stackoverflowError。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010644761.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>好了，现在我们知道了 StackoverflowError 怎么产生的。</p><p>那问题来了，既然 StackoverflowError 或者 NPE 都属于非法访问内存， JVM 为什么不会崩溃呢？</p><p>有了上一节的铺垫，相信你不难回答，其实就是<strong>因为 JVM 自定义了自己的信号处理函数，拦截了 SIGSEGV 信号，针对这两者不让它们崩溃</strong>。</p><p>怎么证明这个推测呢，我们来看下 JVM 的源码来一探究竟</p><h2 id="openjdk-源码解析" tabindex="-1"><a class="header-anchor" href="#openjdk-源码解析" aria-hidden="true">#</a> openJDK 源码解析</h2><p>HotSpot 虚拟机目前使用范围最广的 Java 虚拟机，据 R 大所述， Oracle JDK 与 OpenJDK 里的 JVM 都是 HotSpot VM，从源码层面说，两者基本上是同一个东西。</p>`,48),b={href:"https://github.com/AdoptOpenJDK/openjdk-jdk8u",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>我们只要研究 Linux 下的 JVM，为了便于说明，也方便大家查阅，我把其中关于信号处理的关键流程整理了下（忽略其中的次要代码）。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1685105874249-77691e28-dffa-45e1-8727-cf0f810ad493.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，在启动 JVM 的时候，也设置了信号处理函数，收到 SIGSEGV，SIGPIPE 等信号后最终会调用 JVM_handle_linux_signal 这个自定义信号处理函数，再来看下这个函数的主要逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JVM_handle_linux_signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span>
                        siginfo_t<span class="token operator">*</span> info<span class="token punctuation">,</span>
                        <span class="token keyword">void</span><span class="token operator">*</span> ucVoid<span class="token punctuation">,</span>
                        <span class="token keyword">int</span> abort_if_unrecognized<span class="token punctuation">)</span> <span class="token punctuation">{</span>

   <span class="token comment">// Must do this before SignalHandlerMark, if crash protection installed we will longjmp away</span>
  <span class="token comment">// 这段代码里会调用 siglongjmp，主要做线程恢复之用</span>
  os<span class="token operator">::</span><span class="token class-name">ThreadCrashProtection</span><span class="token operator">::</span><span class="token function">check_crash_protection</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> uc <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> thread <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pc <span class="token operator">=</span> <span class="token punctuation">(</span>address<span class="token punctuation">)</span> os<span class="token operator">::</span><span class="token class-name">Linux</span><span class="token operator">::</span><span class="token function">ucontext_get_pc</span><span class="token punctuation">(</span>uc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Handle ALL stack overflow variations here</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig <span class="token operator">==</span> <span class="token constant">SIGSEGV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Si_addr may not be valid due to a bug in the linux-ppc64 kernel (see</span>
      <span class="token comment">// comment below). Use get_stack_bang_address instead of si_addr.</span>
      address addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">NativeInstruction</span><span class="token operator">*</span><span class="token punctuation">)</span>pc<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get_stack_bang_address</span><span class="token punctuation">(</span>uc<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 判断是否栈溢出了</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">&lt;</span> thread<span class="token operator">-&gt;</span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          addr <span class="token operator">&gt;=</span> thread<span class="token operator">-&gt;</span><span class="token function">stack_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> thread<span class="token operator">-&gt;</span><span class="token function">stack_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span><span class="token function">thread_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _thread_in_Java<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 针对栈溢出 JVM 的内部处理</span>
            stub <span class="token operator">=</span> <span class="token class-name">SharedRuntime</span><span class="token operator">::</span><span class="token function">continuation_for_implicit_exception</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> <span class="token class-name">SharedRuntime</span><span class="token operator">::</span><span class="token constant">STACK_OVERFLOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>sig <span class="token operator">==</span> <span class="token constant">SIGSEGV</span> <span class="token operator">&amp;&amp;</span>
               <span class="token operator">!</span><span class="token class-name">MacroAssembler</span><span class="token operator">::</span><span class="token function">needs_explicit_null_check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>intptr_t<span class="token punctuation">)</span>info<span class="token operator">-&gt;</span>si_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 此处会做空指针检查</span>
      stub <span class="token operator">=</span> <span class="token class-name">SharedRuntime</span><span class="token operator">::</span><span class="token function">continuation_for_implicit_exception</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> <span class="token class-name">SharedRuntime</span><span class="token operator">::</span><span class="token constant">IMPLICIT_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token comment">// 如果是栈溢出或者空指针最终会返回 true，不会走最后的 report_and_die，所以 JVM 不会退出</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stub <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// save all thread context in case we need to restore it</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> thread<span class="token operator">-&gt;</span><span class="token function">set_saved_exception_pc</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    uc<span class="token operator">-&gt;</span>uc_mcontext<span class="token punctuation">.</span>gregs<span class="token punctuation">[</span><span class="token constant">REG_PC</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>greg_t<span class="token punctuation">)</span>stub<span class="token punctuation">;</span>
    <span class="token comment">// 返回 true 代表 JVM 进程不会退出</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">VMError</span> <span class="token function">err</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> pc<span class="token punctuation">,</span> info<span class="token punctuation">,</span> ucVoid<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 生成 hs_err_pid_xxx.log 文件并退出</span>
  err<span class="token punctuation">.</span><span class="token function">report_and_die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">ShouldNotReachHere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Mute compiler</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上代码我们可以知道以下信息：</p><ol><li>发生 stackoverflow 还有空指针错误，确实都发送了 SIGSEGV，只是虚拟机不选择退出，而是自己内部作了额外的处理，其实是恢复了线程的执行，并抛出 StackoverflowError 和 NPE，这就是为什么 JVM 不会崩溃且我们能捕获这两个错误/异常的原因</li><li>如果针对 SIGSEGV 等信号，在以上的函数中 JVM 没有做额外的处理，那么最终会走到 report_and_die 这个方法，这个方法主要做的事情是生成 hs_err_pid_xxx.log crash 文件（记录了一些堆栈信息或错误），然后退出</li></ol><p>至此我相信大家明白了为什么发生了 StackoverflowError 和 NPE 这两个非法访问内存的错误，JVM 却没有崩溃。</p><p><strong>原因其实就是虚拟机内部定义了信号处理函数，而在信号处理函数中对这两者做了额外的处理以让 JVM 不崩溃，另一方面也可以看出如果 JVM 不对信号做额外的处理，最后会自己退出并产生 crash 文件 hs_err_pid_xxx.log（可以通过 -XX:ErrorFile=/var/<em><strong><strong>log</strong></strong></em>/hs_err.log 这样的方式指定），这个文件记录了虚拟机崩溃的重要原因</strong>。</p><p>所以也可以说，虚拟机是否崩溃只要看它是否会产生此崩溃日志文件</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>正常情况下，操作系统为了保证系统安全，所以针对非法内存访问会发送一个 SIGSEGV 信号，而操作系统一般会调用默认的信号处理函数（一般会让相关的进程崩溃）。</p><p>但如果进程觉得&quot;罪不致死&quot;，那么它也可以选择自定义一个信号处理函数，这样的话它就可以做一些自定义的逻辑，比如记录 crash 信息等有意义的事。</p><p>回过头来看为什么虚拟机会针对 StackoverflowError 和 NullPointerException 做额外处理让线程恢复呢，针对 stackoverflow 其实它采用了一种栈回溯的方法保证线程可以一直执行下去，而捕获空指针错误主要是这个错误实在太普遍了。</p><p><strong>为了这一个很常见的错误而让 JVM 崩溃那线上的 JVM 要宕机多少次，所以出于工程健壮性的考虑，与其直接让 JVM 崩溃倒不如让线程起死回生，并且将这两个错误/异常抛给用户来处理。</strong></p>`,14);function f(_,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("之前分享这篇文章的时候："),n("a",u,[s("进程和线程基础知识全家桶，30 张图一套带走(opens new window)"),t(a)]),s("，提到说线程的一个缺点：")]),d,k,n("p",null,[s("刚好看到朋友（"),n("a",v,[s("公众号：码海(opens new window)"),t(a)]),s("）写了一篇：「"),m,s("」")]),g,n("p",null,[s("OpenJDK 是开源的，所以我们主要研究下 Java 8 的 OpenJDK 即可，地址如下："),n("a",b,[s("https://github.com/AdoptOpenJDK/openjdk-jdk8u(opens new window)"),t(a)]),s("，有兴趣的可以下载来看看。")]),h])}const S=e(l,[["render",f],["__file","5.7.html.vue"]]);export{S as default};
