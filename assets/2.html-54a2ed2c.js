import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as o,a as n,b as s,d as e,f as t}from"./app-76089b77.js";const c={},r=n("p",null,[s("我们都知道 Redis 提供了丰富的数据类型，常见的有五种："),n("strong",null,"String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）"),s("。")],-1),u=n("p",null,[s("随着 Redis 版本的更新，后面又支持了四种数据类型： "),n("strong",null,"BitMap（2.2 版新增）、HyperLogLog（2.8 版新增）、GEO（3.2 版新增）、Stream（5.0 版新增）"),s("。")],-1),d=n("p",null,"每种数据对象都各自的应用场景，你能说出它们各自的应用场景吗？",-1),m=n("p",null,"面试过程中，这个问题也很常被问到，又比如会举例一个应用场景来问你，让你说使用哪种 Redis 数据类型来实现。",-1),v={href:"https://try.redis.io/",target:"_blank",rel:"noopener noreferrer"},b=t(`<figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735217.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><strong>String 是最基本的 key-value 结构</strong>，key 是唯一标识，value 是具体的值，value其实不仅是字符串， 也可以是数字（整数或浮点数），<strong>value 最多可以容纳的数据长度是</strong> <strong>512M</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735140.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="内部实现" tabindex="-1"><a class="header-anchor" href="#内部实现" aria-hidden="true">#</a> 内部实现</h2><p><strong>String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。</strong></p><p>SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：</p><ul><li><strong>SDS 不仅可以保存文本数据，还可以保存二进制数据</strong>。因为 <strong>SDS</strong> <strong>使用</strong> <strong>len</strong> <strong>属性的值而不是空字符来判断字符串是否结束</strong>，并且 <strong>SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在</strong> <strong>buf[]</strong> <strong>数组里的数据</strong>。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li><li><strong>SDS 获取字符串长度的时间复杂度是 O(1)</strong>。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；<strong>SDS 结构里用</strong> <strong>len</strong> <strong>属性记录了字符串长度，所以复杂度为</strong> <strong>O(1)****。</strong></li><li><strong>Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出</strong>。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。</li></ul><p>字符串对象的内部编码（encoding）有 3 种 ：<strong>int、raw和 embstr</strong>。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684680894557-5b59e895-8db9-4836-a164-54f7a86c51ac.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果一个字符串对象保存的是整数值，并且这个整数值可以用long类型来表示，那么字符串对象会将整数值保存在字符串对象结构的ptr属性里面（将void*转换成 long），并将字符串对象的编码设置为int。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684680894331-4d25c3a4-e13a-4c71-8d09-a6beb913cb16.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果字符串对象保存的是一个字符串，并且这个字符申的长度小于等于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为embstr， embstr编码是专门用于保存短字符串的一种优化编码方式：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735015.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果字符串对象保存的是一个字符串，并且这个字符串的长度大于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为raw：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735151.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>注意，embstr 编码和 raw 编码的边界在 redis 不同版本中是不一样的：</p><ul><li>redis 2.+ 是 32 字节</li><li>redis 3.0-4.0 是 39 字节</li><li>redis 5.0 是 44 字节</li></ul><p>可以看到embstr和raw编码都会使用SDS来保存值，但不同之处在于embstr会通过一次内存分配函数来分配一块连续的内存空间来保存redisObject和SDS，而raw编码会通过调用两次内存分配函数来分别分配两块空间来保存redisObject和SDS。Redis这样做会有很多好处：</p><ul><li>embstr编码将创建字符串对象所需的内存分配次数从 raw 编码的两次降低为一次；</li><li>释放 embstr编码的字符串对象同样只需要调用一次内存释放函数；</li><li>因为embstr编码的字符串对象的所有数据都保存在一块连续的内存里面可以更好的利用 CPU 缓存提升性能。</li></ul><p>但是 embstr 也有缺点的：</p><ul><li>如果字符串的长度增加需要重新分配内存时，整个redisObject和sds都需要重新分配空间，所以<strong>embstr编码的字符串对象实际上是只读的</strong>，redis没有为embstr编码的字符串对象编写任何相应的修改程序。当我们对embstr编码的字符串对象执行任何修改命令（例如append）时，程序会先将对象的编码从embstr转换成raw，然后再执行修改命令。</li></ul><h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h2><p>普通字符串的基本操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置 key-value 类型的值</span>
<span class="token operator">&gt;</span> SET name lin
OK
<span class="token comment"># 根据 key 获得对应的 value</span>
<span class="token operator">&gt;</span> GET name
<span class="token string">&quot;lin&quot;</span>
<span class="token comment"># 判断某个 key 是否存在</span>
<span class="token operator">&gt;</span> EXISTS name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># 返回 key 所储存的字符串值的长度</span>
<span class="token operator">&gt;</span> STRLEN name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token comment"># 删除某个 key 对应的值</span>
<span class="token operator">&gt;</span> DEL name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>批量设置 :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 批量设置 key-value 类型的值</span>
<span class="token operator">&gt;</span> MSET key1 value1 key2 value2 
OK
<span class="token comment"># 批量获取多个 key 对应的 value</span>
<span class="token operator">&gt;</span> MGET key1 key2 
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计数器（字符串的内容为整数的时候可以使用）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置 key-value 类型的值</span>
<span class="token operator">&gt;</span> SET number <span class="token number">0</span>
OK
<span class="token comment"># 将 key 中储存的数字值增一</span>
<span class="token operator">&gt;</span> INCR number
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># 将key中存储的数字值加 10</span>
<span class="token operator">&gt;</span> INCRBY number <span class="token number">10</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span>
<span class="token comment"># 将 key 中储存的数字值减一</span>
<span class="token operator">&gt;</span> DECR number
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span>
<span class="token comment"># 将key中存储的数字值键 10</span>
<span class="token operator">&gt;</span> DECRBY number <span class="token number">10</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过期（默认为永不过期）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置 key 在 60 秒后过期（该方法是针对已经存在的key设置过期时间）</span>
<span class="token operator">&gt;</span> EXPIRE name  <span class="token number">60</span> 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># 查看数据还有多久过期</span>
<span class="token operator">&gt;</span> TTL name 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">51</span>

<span class="token comment">#设置 key-value 类型的值，并设置该key的过期时间为 60 秒</span>
<span class="token operator">&gt;</span> SET key  value EX <span class="token number">60</span>
OK
<span class="token operator">&gt;</span> SETEX key  <span class="token number">60</span> value
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不存在就插入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不存在就插入（not exists）</span>
<span class="token operator">&gt;</span>SETNX key value
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><h3 id="缓存对象" tabindex="-1"><a class="header-anchor" href="#缓存对象" aria-hidden="true">#</a> 缓存对象</h3><p>使用 String 来缓存对象有两种方式：</p><ul><li><p>直接缓存整个对象的 JSON</p></li><li><ul><li>命令例子： SET user:1 &#39;{&quot;name&quot;:&quot;xiaolin&quot;, &quot;age&quot;:18}&#39;。</li></ul></li><li><p>采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值</p></li><li><ul><li>命令例子： MSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20。</li></ul></li></ul><h3 id="常规计数" tabindex="-1"><a class="header-anchor" href="#常规计数" aria-hidden="true">#</a> 常规计数</h3><p><strong>Redis 处理命令是单线程，所以执行命令的过程是原子的。</strong></p><p>因此 <strong>String 数据类型适合计数场景</strong>，比如<strong>计算访问次数、点赞、转发、库存数量</strong>等等。</p><p>比如计算文章的阅读量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 初始化文章的阅读量</span>
<span class="token operator">&gt;</span> SET aritcle:readcount:1001 <span class="token number">0</span>
OK
<span class="token comment">#阅读量+1</span>
<span class="token operator">&gt;</span> INCR aritcle:readcount:1001
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment">#阅读量+1</span>
<span class="token operator">&gt;</span> INCR aritcle:readcount:1001
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token comment">#阅读量+1</span>
<span class="token operator">&gt;</span> INCR aritcle:readcount:1001
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token comment"># 获取对应文章的阅读量</span>
<span class="token operator">&gt;</span> GET aritcle:readcount:1001
<span class="token string">&quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h3><p><strong>SET 命令有个 NX 参数可以实现「key不存在才插入」，可以用它来实现分布式锁</strong>：</p><ul><li>如果 key 不存在，则显示插入成功，可以用来表示加锁成功；</li><li>如果 key 存在，则会显示插入失败，可以用来表示加锁失败。</li></ul><p><strong>一般而言，还会对分布式锁加上过期时间</strong>，分布式锁的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SET lock_key unique_value NX PX <span class="token number">10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>lock_key 就是 key 键；</li><li>unique_value 是客户端生成的唯一的标识；</li><li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</li><li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</li></ul><p>而解锁的过程就是将 lock_key 键删除，但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，<strong>解锁的时候，我们要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。</strong></p><p>可以看到，<strong>解锁时有两个操作，这时就需要 Lua 脚本来保证解锁的原子性，因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，保证了锁释放操作的原子性。</strong></p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">//</span> 释放锁时，先比较 unique_value 是否相等，避免锁的误释放
<span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;del&quot;</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，就<strong>通过使用 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁和解锁。</strong></p><h3 id="共享-session-信息" tabindex="-1"><a class="header-anchor" href="#共享-session-信息" aria-hidden="true">#</a> 共享 Session 信息</h3><p>通常我们在开发后台管理系统时，会使用 Session 来保存用户的会话(登录)状态，这些 Session 信息会被保存在服务器端，但这只适用于单系统应用，如果是分布式系统此模式将不再适用。</p><p>例如用户一的 Session 信息被存储在服务器一，但第二次访问时用户一被分配到服务器二，这个时候服务器并没有用户一的 Session 信息，就会出现<strong>需要重复登录的问题，问题在于分布式系统（通过负载均衡）每次会把请求随机分配到不同的服务器。</strong></p><p>分布式系统单独存储 Session 流程图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735162.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>借助 Redis 对这些 Session 信息进行统一的存储和管理，这样无论请求发送到那台服务器，服务器都会去同一个 Redis 获取相关的 Session 信息，这样就解决了分布式系统下 Session 存储的问题。</strong></p><p>分布式系统使用同一个 Redis 存储 Session 流程图：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684680896766-5fb4fc08-744a-4990-85b8-e45a4dd0d655.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h1><h2 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h2><p>List 列表是简单的字符串列表，<strong>按照插入顺序排序</strong>，可以从头部或尾部向 List 列表添加元素。</p><p>列表的最大长度为 2^32 - 1，也即每个列表支持超过 40 亿个元素。</p><h2 id="内部实现-1" tabindex="-1"><a class="header-anchor" href="#内部实现-1" aria-hidden="true">#</a> 内部实现</h2><p>List 类型的底层数据结构是由<strong>双向链表或压缩列表</strong>实现的：</p><ul><li>如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用<strong>压缩列表</strong>作为 List 类型的底层数据结构；</li><li>如果列表的元素不满足上面的条件，Redis 会使用<strong>双向链表</strong>作为 List 类型的底层数据结构；</li></ul><p><strong>在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表</strong>。</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684680896996-7f18aadf-cb15-4767-b8d6-c14261c78e44.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将一个或多个值value插入到key列表的表头(最左边)，最后的值在最前面</span>
LPUSH key value <span class="token punctuation">[</span>value <span class="token punctuation">..</span>.<span class="token punctuation">]</span> 
<span class="token comment"># 将一个或多个值value插入到key列表的表尾(最右边)</span>
RPUSH key value <span class="token punctuation">[</span>value <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token comment"># 移除并返回key列表的头元素</span>
LPOP key     
<span class="token comment"># 移除并返回key列表的尾元素</span>
RPOP key 

<span class="token comment"># 返回列表key中指定区间内的元素，区间以偏移量start和stop指定，从0开始</span>
LRANGE key start stop

<span class="token comment"># 从key列表表头弹出一个元素，没有就阻塞timeout秒，如果timeout=0则一直阻塞</span>
BLPOP key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token function">timeout</span>
<span class="token comment"># 从key列表表尾弹出一个元素，没有就阻塞timeout秒，如果timeout=0则一直阻塞</span>
BRPOP key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token function">timeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h2><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列" aria-hidden="true">#</a> 消息队列</h3><p>消息队列在存取消息时，必须要满足三个需求，分别是<strong>消息保序、处理重复的消息和保证消息可靠性</strong>。</p><p>Redis 的 List 和 Stream 两种数据类型，就可以满足消息队列的这三个需求。</p><p><em>1、如何满足消息保序需求？</em></p><p><strong>List 本身就是按先进先出的顺序对数据进行存取的</strong>，所以，如果使用 List 作为消息队列保存消息的话，就已经能满足消息保序的需求了。</p><p>List 可以使用 <strong>LPUSH + RPOP</strong> （或者反过来，RPUSH+LPOP）命令实现消息队列。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684680896980-5cf3795d-c6da-4485-b88f-568968d18f9e.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>生产者使用 LPUSH key value[value...] 将消息插入到队列的头部，如果 key 不存在则会创建一个空的队列再插入消息。</li><li>消费者使用 RPOP key 依次读取队列的消息，先进先出。</li></ul><p>不过，在消费者读取数据时，有一个潜在的性能风险点。</p><p>在生产者往 List 中写入数据时，List 并不会主动地通知消费者有新消息写入，如果消费者想要及时处理消息，就需要在程序中不停地调用 RPOP 命令（比如使用一个while(1)循环）。如果有新消息写入，RPOP命令就会返回结果，否则，RPOP命令返回空值，再继续循环。</p><p>所以，即使没有新消息写入List，消费者也要不停地调用 RPOP 命令，这就会导致消费者程序的 CPU 一直消耗在执行 RPOP 命令上，带来不必要的性能损失。</p><p>为了解决这个问题，Redis提供了 BRPOP 命令。<strong>BRPOP命令也称为阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据</strong>。和消费者程序自己不停地调用RPOP命令相比，这种方式能<strong>节省CPU开销。</strong></p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735806.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>2、如何处理重复的消息？</em></p><p>消费者要实现重复消息的判断，需要 2 个方面的要求：</p><ul><li><p><strong>每个消息都有一个全局的 ID。</strong></p></li><li><p><strong>消费者要记录已经处理过的消息的 ID。</strong></p></li><li><ul><li>当收到一条消息后，消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理。如果已经处理过，那么，消费者程序就不再进行处理了。</li></ul></li></ul><p>但是 <strong>List 并不会为每个消息生成 ID 号，所以我们需要自行为每个消息生成一个全局唯一ID</strong>，生成之后，我们<strong>在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID</strong>。</p><p>例如，我们执行以下命令，就把一条全局 ID 为 111000102、库存量为 99 的消息插入了消息队列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> LPUSH mq <span class="token string">&quot;111000102:stock:99&quot;</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>3、如何保证消息可靠性？</em></p><p>当消费者程序从 List 中读取一条消息后，List 就不会再留存这条消息了。所以，如果消费者程序在处理消息的过程出现了故障或宕机，就会导致消息没有处理完成，那么，消费者程序再次启动后，就没法再次从 List 中读取消息了。</p><p>为了留存消息，List 类型提供了 BRPOPLPUSH 命令，这个命令的<strong>作用是让消费者程序从一个 List 中读取消息，同时，Redis 会把这个消息再插入到另一个 List（可以叫作备份 List）留存</strong>。</p><p>这样一来，如果消费者程序读了消息但没能正常处理，等它重启后，就可以从备份 List 中重新读取消息并进行处理了。</p><p>综上，基于 List 类型的消息队列，满足<strong>消息队列的三大需求（消息保序、处理重复消息和保证消息可靠性）</strong>。</p><ul><li><strong>消息保序：使用 LPUSH + RPOP；</strong></li><li><strong>阻塞读取：使用 BRPOP；</strong></li><li><strong>重复消息处理：生产者自行实现全局唯一 ID；</strong></li><li><strong>消息的可靠性：使用 BRPOPLPUSH</strong></li></ul><p>List 作为消息队列有什么缺陷？</p><p><strong>List 不支持多个消费者消费同一条消息</strong>**，因为一旦消费者拉取一条消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费。**</p><p>要实现一条消息可以被多个消费者消费，那么就要将多个消费者组成一个消费组，使得多个消费者可以消费同一条消息，但是 <strong>List 类型并不支持消费组的实现</strong>。</p><p>这就要说起 Redis 从 5.0 版本开始提供的 Stream 数据类型了，Stream 同样能够满足消息队列的三大需求，而且它还支持「消费组」形式的消息读取。</p><h1 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> Hash</h1><h2 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2" aria-hidden="true">#</a> 介绍</h2><p><strong>Hash 是一个键值对（key - value）集合</strong>，其中 value 的形式如： value=[{field1，value1}，...{fieldN，valueN}]。<strong>Hash 特别适合用于存储对象。</strong></p><p>Hash 与 String 对象的区别如下图所示:</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735909.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="内部实现-2" tabindex="-1"><a class="header-anchor" href="#内部实现-2" aria-hidden="true">#</a> 内部实现</h2><p>Hash 类型的底层数据结构是由<strong>压缩列表或哈希表</strong>实现的：</p><ul><li>如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用<strong>压缩列表</strong>作为 Hash 类型的底层数据结构；</li><li>如果哈希类型元素不满足上面条件，Redis 会使用<strong>哈希表</strong>作为 Hash 类型的 底层数据结构。</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了</strong>。</p><h2 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1" aria-hidden="true">#</a> 常用命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 存储一个哈希表key的键值</span>
HSET key field value   
<span class="token comment"># 获取哈希表key对应的field键值</span>
HGET key field

<span class="token comment"># 在一个哈希表key中存储多个键值对</span>
HMSET key field value <span class="token punctuation">[</span>field value<span class="token punctuation">..</span>.<span class="token punctuation">]</span> 
<span class="token comment"># 批量获取哈希表key中多个field键值</span>
HMGET key field <span class="token punctuation">[</span>field <span class="token punctuation">..</span>.<span class="token punctuation">]</span>       
<span class="token comment"># 删除哈希表key中的field键值</span>
HDEL key field <span class="token punctuation">[</span>field <span class="token punctuation">..</span>.<span class="token punctuation">]</span>    

<span class="token comment"># 返回哈希表key中field的数量</span>
HLEN key       
<span class="token comment"># 返回哈希表key中所有的键值</span>
HGETALL key 

<span class="token comment"># 为哈希表key中field键的值加上增量n</span>
HINCRBY key field n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2" aria-hidden="true">#</a> 应用场景</h2><h3 id="缓存对象-1" tabindex="-1"><a class="header-anchor" href="#缓存对象-1" aria-hidden="true">#</a> 缓存对象</h3><p><strong>Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象。</strong></p><p>我们以用户信息为例，它在关系型数据库中的结构是这样的：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735535.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们可以使用如下命令，将用户对象的信息存储到 Hash 类型：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 存储一个哈希表uid:1的键值</span>
<span class="token operator">&gt;</span> HMSET uid:1 name Tom age <span class="token number">15</span>
<span class="token number">2</span>
<span class="token comment"># 存储一个哈希表uid:2的键值</span>
<span class="token operator">&gt;</span> HMSET uid:2 name Jerry age <span class="token number">13</span>
<span class="token number">2</span>
<span class="token comment"># 获取哈希表用户id为1中所有的键值</span>
<span class="token operator">&gt;</span> HGETALL uid:1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Tom&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;15&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis Hash 存储结构如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735421.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在介绍 String 类型的应用场景时有所介绍，String + Json也是存储对象的一种方式，那么存储对象时，到底用 String + json 还是用 Hash 呢？</p><p><strong>一般对象用 String + Json 存储，对象中某些频繁变化的属性可以考虑抽出来用 Hash 类型存储。</strong></p><h3 id="购物车" tabindex="-1"><a class="header-anchor" href="#购物车" aria-hidden="true">#</a> 购物车</h3><p><strong>以用户 id 为 key，商品 id 为 field，商品数量为 value，恰好构成了购物车的3个要素</strong>，如下图所示。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735120.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>涉及的命令如下：</p>`,128),g=n("ul",null,[n("li",null,"添加商品：HSET cart:{用户id} {商品id} 1"),n("li",null,"添加数量：HINCRBY cart:{用户id} {商品id} 1"),n("li",{用户id:""},"商品总数：HLEN cart:"),n("li",{商品id:"",用户id:""},"删除商品：HDEL cart:"),n("li",{用户id:""},"获取购物车所有商品：HGETALL cart:")],-1),k=t(`<p><strong>当前仅仅是将商品ID存储到了Redis 中，在回显商品具体信息的时候，还需要拿着商品 id 查询一次数据库，获取完整的商品的信息。</strong></p><h1 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h1><h2 id="介绍-3" tabindex="-1"><a class="header-anchor" href="#介绍-3" aria-hidden="true">#</a> 介绍</h2><p><strong>Set 类型是一个无序并唯一的键值集合</strong>，它的存储顺序不会按照插入的先后顺序进行存储。</p><p>一个集合最多可以存储 2^32-1 个元素。概念和数学中个的集合基本类似，可以交集，并集，差集等等，所以 <strong>Set 类型除了支持集合内的增删改查，同时还支持多个集合取交集、并集、差集</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735590.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Set 类型和 List 类型的区别如下：</p><ul><li>List 可以存储重复元素，Set 只能存储非重复元素；</li><li>List 是按照元素的先后顺序存储元素的，而 Set 则是无序方式存储元素的。</li></ul><h2 id="内部实现-3" tabindex="-1"><a class="header-anchor" href="#内部实现-3" aria-hidden="true">#</a> 内部实现</h2><p>Set 类型的底层数据结构是由<strong>哈希表或整数集合</strong>实现的：</p><ul><li>如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用<strong>整数集合</strong>作为 Set 类型的底层数据结构；</li><li>如果集合中的元素不满足上面条件，则 Redis 使用<strong>哈希表</strong>作为 Set 类型的底层数据结构。</li></ul><h2 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2" aria-hidden="true">#</a> 常用命令</h2><p>Set常用操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 往集合key中存入元素，元素存在则忽略，若key不存在则新建</span>
SADD key member <span class="token punctuation">[</span>member <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token comment"># 从集合key中删除元素</span>
SREM key member <span class="token punctuation">[</span>member <span class="token punctuation">..</span>.<span class="token punctuation">]</span> 
<span class="token comment"># 获取集合key中所有元素</span>
SMEMBERS key
<span class="token comment"># 获取集合key中的元素个数</span>
SCARD key

<span class="token comment"># 判断member元素是否存在于集合key中</span>
SISMEMBER key member

<span class="token comment"># 从集合key中随机选出count个元素，元素不从key中删除</span>
SRANDMEMBER key <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
<span class="token comment"># 从集合key中随机选出count个元素，元素从key中删除</span>
SPOP key <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set运算操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 交集运算</span>
SINTER key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token comment"># 将交集结果存入新集合destination中</span>
SINTERSTORE destination key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 并集运算</span>
SUNION key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token comment"># 将并集结果存入新集合destination中</span>
SUNIONSTORE destination key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 差集运算</span>
SDIFF key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token comment"># 将差集结果存入新集合destination中</span>
SDIFFSTORE destination key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3" aria-hidden="true">#</a> 应用场景</h2><p>集合的几个特性，<strong>无序、不可重复、支持并交差等操作</strong>。</p><p>因此 <strong>Set 类型比较适合用来数据去重和保障数据的唯一性，还可以用来统计多个集合的交集、错集和并集等</strong>。</p><p>当我们存储的数据是无序并且需要去重的情况下，比较适合使用集合类型进行存储。</p><p>但是要提醒你一下，这里有一个潜在的风险。<strong>Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞</strong>。</p><p><strong>在主从集群中，为了避免主库因为 Set 做聚合计算（交集、差集、并集）时导致主库被阻塞，我们可以选择一个从库完成聚合统计，或者把数据返回给客户端，由客户端来完成聚合统计。</strong></p><h3 id="点赞" tabindex="-1"><a class="header-anchor" href="#点赞" aria-hidden="true">#</a> 点赞</h3><p><strong>Set 类型可以保证一个用户只能点一个赞</strong>。</p><p>这里举例子一个场景，key 是文章id，value 是用户id。</p><p>uid:1 、uid:2、uid:3 三个用户分别对 article:1 文章点赞了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># uid:1 用户对文章 article:1 点赞</span>
<span class="token operator">&gt;</span> SADD article:1 uid:1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># uid:2 用户对文章 article:1 点赞</span>
<span class="token operator">&gt;</span> SADD article:1 uid:2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># uid:3 用户对文章 article:1 点赞</span>
<span class="token operator">&gt;</span> SADD article:1 uid:3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uid:1 取消了对 article:1 文章点赞。</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>&gt; SREM article:1 uid:1
(integer) 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 article:1 文章所有点赞用户 :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SMEMBERS article:1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;uid:3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;uid:2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 article:1 文章的点赞用户数量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SCARD article:1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>判断用户 uid:1 是否对文章 article:1 点赞了：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SISMEMBER article:1 uid:1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>  <span class="token comment"># 返回0说明没点赞，返回1则说明点赞了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="共同关注" tabindex="-1"><a class="header-anchor" href="#共同关注" aria-hidden="true">#</a> 共同关注</h3><p><strong>Set 类型支持交集运算，所以可以用来计算共同关注的好友、公众号等。</strong></p><p>key 可以是用户id，value 则是已关注的公众号的id。</p><p>uid:1 用户关注公众号 id 为 5、6、7、8、9，uid:2 用户关注公众号 id 为 7、8、9、10、11。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># uid:1 用户关注公众号 id 为 5、6、7、8、9</span>
<span class="token operator">&gt;</span> SADD uid:1 <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
<span class="token comment"># uid:2  用户关注公众号 id 为 7、8、9、10、11</span>
<span class="token operator">&gt;</span> SADD uid:2 <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uid:1 和 uid:2 共同关注的公众号：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 获取共同关注</span>
<span class="token operator">&gt;</span> SINTER uid:1 uid:2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;7&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;8&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;9&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给 uid:2 推荐 uid:1 关注的公众号：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SDIFF uid:1 uid:2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;5&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;6&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证某个公众号是否同时被 uid:1 或 uid:2 关注:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SISMEMBER uid:1 <span class="token number">5</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token comment"># 返回0，说明关注了</span>
<span class="token operator">&gt;</span> SISMEMBER uid:2 <span class="token number">5</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token comment"># 返回0，说明没关注</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽奖活动" tabindex="-1"><a class="header-anchor" href="#抽奖活动" aria-hidden="true">#</a> 抽奖活动</h3><p><strong>存储某活动中中奖的用户名 ，Set 类型因为有去重功能，可以保证同一个用户不会中奖两次。</strong></p><p><strong>key为抽奖活动名，value为员工名称，把所有员工名称放入抽奖箱</strong> ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>SADD lucky Tom Jerry John Sean Marry Lindy Sary Mark
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果允许重复中奖，可以使用 SRANDMEMBER 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 抽取 1 个一等奖：</span>
<span class="token operator">&gt;</span> SRANDMEMBER lucky <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Tom&quot;</span>
<span class="token comment"># 抽取 2 个二等奖：</span>
<span class="token operator">&gt;</span> SRANDMEMBER lucky <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Mark&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Jerry&quot;</span>
<span class="token comment"># 抽取 3 个三等奖：</span>
<span class="token operator">&gt;</span> SRANDMEMBER lucky <span class="token number">3</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Sary&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Tom&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;Jerry&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不允许重复中奖，可以使用 SPOP 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 抽取一等奖1个</span>
<span class="token operator">&gt;</span> SPOP lucky <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Sary&quot;</span>
<span class="token comment"># 抽取二等奖2个</span>
<span class="token operator">&gt;</span> SPOP lucky <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Jerry&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Mark&quot;</span>
<span class="token comment"># 抽取三等奖3个</span>
<span class="token operator">&gt;</span> SPOP lucky <span class="token number">3</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;John&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Sean&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;Lindy&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="zset" tabindex="-1"><a class="header-anchor" href="#zset" aria-hidden="true">#</a> Zset</h1><h2 id="介绍-4" tabindex="-1"><a class="header-anchor" href="#介绍-4" aria-hidden="true">#</a> 介绍</h2><p><strong>Zset 类型（有序集合类型）相比于 Set 类型多了一个排序属性 score（分值）</strong>，对于有序集合 ZSet 来说，每个存储元素相当于有两个值组成的，一个是有序集合的元素值，一个是排序值。</p><p>有序集合保留了集合不能有重复成员的特性（分值可以重复），但不同的是，有序集合中的元素可以排序。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735473.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="内部实现-4" tabindex="-1"><a class="header-anchor" href="#内部实现-4" aria-hidden="true">#</a> 内部实现</h2><p>Zset 类型的底层数据结构是由<strong>压缩列表或跳表</strong>实现的：</p><ul><li>如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用<strong>压缩列表</strong>作为 Zset 类型的底层数据结构；</li><li>如果有序集合的元素不满足上面的条件，Redis 会使用<strong>跳表</strong>作为 Zset 类型的底层数据结构；</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</strong></p><h2 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3" aria-hidden="true">#</a> 常用命令</h2><p>Zset 常用操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 往有序集合key中加入带分值元素</span>
ZADD key score member <span class="token punctuation">[</span><span class="token punctuation">[</span>score member<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>   
<span class="token comment"># 往有序集合key中删除元素</span>
ZREM key member <span class="token punctuation">[</span>member<span class="token punctuation">..</span>.<span class="token punctuation">]</span>                 
<span class="token comment"># 返回有序集合key中元素member的分值</span>
ZSCORE key member
<span class="token comment"># 返回有序集合key中元素个数</span>
ZCARD key 

<span class="token comment"># 为有序集合key中元素member的分值加上increment</span>
ZINCRBY key increment member 

<span class="token comment"># 正序获取有序集合key从start下标到stop下标的元素</span>
ZRANGE key start stop <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span>
<span class="token comment"># 倒序获取有序集合key从start下标到stop下标的元素</span>
ZREVRANGE key start stop <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span>

<span class="token comment"># 返回有序集合中指定分数区间内的成员，分数由低到高排序。</span>
ZRANGEBYSCORE key min max <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span> <span class="token punctuation">[</span>LIMIT offset count<span class="token punctuation">]</span>

<span class="token comment"># 返回指定成员区间内的成员，按字典正序排列, 分数必须相同。</span>
ZRANGEBYLEX key min max <span class="token punctuation">[</span>LIMIT offset count<span class="token punctuation">]</span>
<span class="token comment"># 返回指定成员区间内的成员，按字典倒序排列, 分数必须相同</span>
ZREVRANGEBYLEX key max min <span class="token punctuation">[</span>LIMIT offset count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Zset 运算操作（相比于 Set 类型，ZSet 类型没有支持差集运算）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 并集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积</span>
ZUNIONSTORE destkey numberkeys key <span class="token punctuation">[</span>key<span class="token punctuation">..</span>.<span class="token punctuation">]</span> 
<span class="token comment"># 交集计算(相同元素分值相加)，numberkeys一共多少个key，WEIGHTS每个key对应的分值乘积</span>
ZINTERSTORE destkey numberkeys key <span class="token punctuation">[</span>key<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4" aria-hidden="true">#</a> 应用场景</h2><p><strong>Zset 类型（Sorted Set，有序集合） 可以根据元素的权重来排序，我们可以自己来决定每个元素的权重值。</strong></p><p>比如说，我们<strong>可以根据元素插入 Sorted Set 的时间确定权重值，先插入的元素权重小，后插入的元素权重大。</strong></p><p><strong>在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，可以优先考虑使用 Sorted Set。</strong></p><h3 id="排行榜" tabindex="-1"><a class="header-anchor" href="#排行榜" aria-hidden="true">#</a> 排行榜</h3><p>有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。</p><p>我们以博文点赞排名为例，小林发表了五篇博文，分别获得赞为 200、40、100、50、150。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># arcticle:1 文章获得了200个赞</span>
<span class="token operator">&gt;</span> ZADD user:xiaolin:ranking <span class="token number">200</span> arcticle:1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># arcticle:2 文章获得了40个赞</span>
<span class="token operator">&gt;</span> ZADD user:xiaolin:ranking <span class="token number">40</span> arcticle:2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># arcticle:3 文章获得了100个赞</span>
<span class="token operator">&gt;</span> ZADD user:xiaolin:ranking <span class="token number">100</span> arcticle:3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># arcticle:4 文章获得了50个赞</span>
<span class="token operator">&gt;</span> ZADD user:xiaolin:ranking <span class="token number">50</span> arcticle:4
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token comment"># arcticle:5 文章获得了150个赞</span>
<span class="token operator">&gt;</span> ZADD user:xiaolin:ranking <span class="token number">150</span> arcticle:5
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文章 arcticle:4 新增一个赞，可以使用 ZINCRBY 命令（为有序集合key中元素member的分值加上increment）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZINCRBY user:xiaolin:ranking <span class="token number">1</span> arcticle:4
<span class="token string">&quot;51&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看某篇文章的赞数，可以使用 ZSCORE 命令（返回有序集合key中元素个数）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZSCORE user:xiaolin:ranking arcticle:4
<span class="token string">&quot;50&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取小林文章赞数最多的 3 篇文章，可以使用 ZREVRANGE 命令（倒序获取有序集合 key 从start下标到stop下标的元素）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># WITHSCORES 表示把 score 也显示出来</span>
<span class="token operator">&gt;</span> ZREVRANGE user:xiaolin:ranking <span class="token number">0</span> <span class="token number">2</span> WITHSCORES
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;arcticle:1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;200&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;arcticle:5&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;150&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;arcticle:3&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取小林 100 赞到 200 赞的文章，可以使用 ZRANGEBYSCORE 命令（返回有序集合中指定分数区间内的成员，分数由低到高排序）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYSCORE user:xiaolin:ranking <span class="token number">100</span> <span class="token number">200</span> WITHSCORES
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;arcticle:3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;100&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;arcticle:5&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;150&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;arcticle:1&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;200&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="电话、姓名排序" tabindex="-1"><a class="header-anchor" href="#电话、姓名排序" aria-hidden="true">#</a> 电话、姓名排序</h3><p>使用有序集合的 ZRANGEBYLEX 或 ZREVRANGEBYLEX 可以帮助我们实现电话号码或姓名的排序，我们以 ZRANGEBYLEX （返回指定成员区间内的成员，按 key 正序排列，分数必须相同）为例。</p><p><strong>注意：不要在分数不一致的 SortSet 集合中去使用 ZRANGEBYLEX和 ZREVRANGEBYLEX 指令，因为获取的结果会不准确。</strong></p><p><em>1、电话排序</em></p><p>我们可以将电话号码存储到 SortSet 中，然后根据需要来获取号段：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZADD phone <span class="token number">0</span> <span class="token number">13100111100</span> <span class="token number">0</span> <span class="token number">13110114300</span> <span class="token number">0</span> <span class="token number">13132110901</span> 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token operator">&gt;</span> ZADD phone <span class="token number">0</span> <span class="token number">13200111100</span> <span class="token number">0</span> <span class="token number">13210414300</span> <span class="token number">0</span> <span class="token number">13252110901</span> 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token operator">&gt;</span> ZADD phone <span class="token number">0</span> <span class="token number">13300111100</span> <span class="token number">0</span> <span class="token number">13310414300</span> <span class="token number">0</span> <span class="token number">13352110901</span> 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取所有号码:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYLEX phone - +
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;13100111100&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;13110114300&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;13132110901&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;13200111100&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;13210414300&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;13252110901&quot;</span>
<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">&quot;13300111100&quot;</span>
<span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">&quot;13310414300&quot;</span>
<span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">&quot;13352110901&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 132 号段的号码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYLEX phone <span class="token punctuation">[</span><span class="token number">132</span> <span class="token punctuation">(</span><span class="token number">133</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;13200111100&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;13210414300&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;13252110901&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取132、133号段的号码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYLEX phone <span class="token punctuation">[</span><span class="token number">132</span> <span class="token punctuation">(</span><span class="token number">134</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;13200111100&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;13210414300&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;13252110901&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;13300111100&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;13310414300&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;13352110901&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>2、姓名排序</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> zadd names <span class="token number">0</span> Toumas <span class="token number">0</span> Jake <span class="token number">0</span> Bluetuo <span class="token number">0</span> Gaodeng <span class="token number">0</span> Aimini <span class="token number">0</span> Aidehua 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取所有人的名字:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYLEX names - +
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Aidehua&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Aimini&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;Bluetuo&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;Gaodeng&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;Jake&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;Toumas&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取名字中大写字母A开头的所有人：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYLEX names <span class="token punctuation">[</span>A <span class="token punctuation">(</span>B
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Aidehua&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Aimini&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取名字中大写字母 C 到 Z 的所有人：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGEBYLEX names <span class="token punctuation">[</span>C <span class="token punctuation">[</span>Z
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Gaodeng&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Jake&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;Toumas&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="bitmap" tabindex="-1"><a class="header-anchor" href="#bitmap" aria-hidden="true">#</a> BitMap</h1><h2 id="介绍-5" tabindex="-1"><a class="header-anchor" href="#介绍-5" aria-hidden="true">#</a> 介绍</h2><p>**Bitmap，即位图，是一串连续的二进制数组（0和1），可以通过偏移量（offset）定位元素。**BitMap通过最小的单位bit来进行0|1的设置，表示某个元素的值或者状态，时间复杂度为O(1)。</p><p>由于 bit 是计算机中最小的单位，使用它进行储存将非常节省空间，特别适合一些数据量大且使用<strong>二值统计的场景</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735141.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="内部实现-5" tabindex="-1"><a class="header-anchor" href="#内部实现-5" aria-hidden="true">#</a> 内部实现</h2><p><strong>Bitmap 本身是用 String 类型作为底层数据结构实现的一种统计二值状态的数据类型。</strong></p><p>String 类型是会保存为二进制的字节数组，所以，Redis 就把字节数组的每个 bit 位利用起来，用来表示一个元素的二值状态，你<strong>可以把 Bitmap 看作是一个 bit 数组。</strong></p>`,112),h={id:"常用命令-4",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#常用命令-4","aria-hidden":"true"},"#",-1),S={href:"https://xiaolincoding.com/redis/data_struct/command.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-5",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>bitmap 基本操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置值，其中value只能是 0 和 1</span>
SETBIT key offset value

<span class="token comment"># 获取值</span>
GETBIT key offset

<span class="token comment"># 获取指定范围内值为 1 的个数</span>
<span class="token comment"># start 和 end 以字节为单位</span>
BITCOUNT key start end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bitmap 运算操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># BitMap间的运算</span>
<span class="token comment"># operations 位移操作符，枚举值</span>
  AND 与运算 <span class="token operator">&amp;</span>
  OR 或运算 <span class="token operator">|</span>
  XOR 异或 ^
  NOT 取反 ~
<span class="token comment"># result 计算的结果，会存储在该key中</span>
<span class="token comment"># key1 … keyn 参与运算的key，可以有多个，空格分割，not运算只能一个key</span>
<span class="token comment"># 当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0。返回值是保存到 destkey 的字符串的长度（以字节byte为单位），和输入 key 中最长的字符串长度相等。</span>
BITOP <span class="token punctuation">[</span>operations<span class="token punctuation">]</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token punctuation">[</span>key1<span class="token punctuation">]</span> <span class="token punctuation">[</span>keyn…<span class="token punctuation">]</span>

<span class="token comment"># 返回指定key中第一次出现指定value(0/1)的位置</span>
BITPOS <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-5" tabindex="-1"><a class="header-anchor" href="#应用场景-5" aria-hidden="true">#</a> 应用场景</h2><p><strong>Bitmap 类型非常适合二值状态统计的场景</strong>，这里的二值状态就是指集合元素的取值就只有 0 和 1 两种，<strong>在记录海量数据时，Bitmap 能够有效地节省内存空间。</strong></p><h3 id="签到统计" tabindex="-1"><a class="header-anchor" href="#签到统计" aria-hidden="true">#</a> 签到统计</h3><p>在签到打卡的场景中，我们只用记录签到（1）或未签到（0），所以它就是非常典型的二值状态。</p><p>签到统计时，每个用户一天的签到用 1 个 bit 位就能表示，一个月（假设是 31 天）的签到情况用 31 个 bit 位就可以，而一年的签到也只需要用 365 个 bit 位，根本不用太复杂的集合类型。</p><p>假设我们要统计 ID 100 的用户在 2022 年 6 月份的签到情况，就可以按照下面的步骤进行操作。</p><p>第一步，执行下面的命令，记录该用户 6 月 3 号已签到。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SETBIT uid:sign:100:202206 <span class="token number">2</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步，检查该用户 6 月 3 日是否签到。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GETBIT uid:sign:100:202206 <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步，统计该用户在 6 月份的签到次数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>BITCOUNT uid:sign:100:202206
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，我们就知道该用户在 6 月份的签到情况了。</p><p>如何统计这个月首次打卡时间呢？</p><p>Redis 提供了 BITPOS key bitValue [start] [end]指令，返回数据表示 Bitmap 中第一个值为 bitValue 的 offset 位置。</p><p>在默认情况下， 命令将检测整个位图， 用户可以通过可选的 start 参数和 end 参数指定要检测的范围。所以我们可以通过执行这条命令来获取 userID = 100 在 2022 年 6 月份<strong>首次打卡</strong>日期：</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>BITPOS uid:sign:100:202206 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，因为 offset 从 0 开始的，所以我们需要将返回的 value + 1 。</p><h3 id="判断用户登陆态" tabindex="-1"><a class="header-anchor" href="#判断用户登陆态" aria-hidden="true">#</a> 判断用户登陆态</h3><p><strong>Bitmap 提供了</strong> <strong>GETBIT、SETBIT</strong> <strong>操作，通过一个偏移值 offset 对 bit 数组的 offset 位置的 bit 位进行读写操作，需要注意的是 offset 从 0 开始。</strong></p><p>只需要一个 key = login_status 表示存储用户登陆状态集合数据， 将用户 ID 作为 offset，在线就设置为 1，下线设置 0。通过 GETBIT判断对应的用户是否在线。 5000 万用户只需要 6 MB 的空间。</p><p>假如我们要判断 ID = 10086 的用户的登陆情况：</p><p>第一步，执行以下指令，表示用户已登录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SETBIT login_status <span class="token number">10086</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步，检查该用户是否登陆，返回值 1 表示已登录。</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>GETBIT login_status 10086
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步，登出，将 offset 对应的 value 设置成 0。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SETBIT login_status <span class="token number">10086</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="连续签到用户总数" tabindex="-1"><a class="header-anchor" href="#连续签到用户总数" aria-hidden="true">#</a> 连续签到用户总数</h3><p>如何统计出这连续 7 天连续打卡用户总数呢？</p><p>我们把每天的日期作为 Bitmap 的 key，userId 作为 offset，若是打卡则将 offset 位置的 bit 设置成 1。</p><p>key 对应的集合的每个 bit 位的数据则是一个用户在该日期的打卡记录。</p><p>一共有 7 个这样的 Bitmap，如果我们能对这 7 个 Bitmap 的<strong>对应的 bit 位做 『与』运算</strong>。同样的 UserID offset 都是一样的，当一个 userID 在 7 个 Bitmap 对应对应的 offset 位置的 bit = 1 就说明该用户 7 天连续打卡。</p><p>结果保存到一个新 Bitmap 中，我们再通过 BITCOUNT 统计 bit = 1 的个数便得到了连续打卡 7 天的用户总数了。</p><p>Redis 提供了 BITOP operation destkey key [key ...]这个指令用于对一个或者多个 key 的 Bitmap 进行位元操作。</p><ul><li>operation 可以是 and、OR、NOT、XOR。当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0 。空的 key 也被看作是包含 0 的字符串序列。</li></ul><p>假设要统计 3 天连续打卡的用户数，则是将三个 bitmap 进行 AND 操作，并将结果保存到 destmap 中，接着对 destmap 执行 BITCOUNT 统计，如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 与操作</span>
BITOP AND destmap bitmap:01 bitmap:02 bitmap:03
<span class="token comment"># 统计 bit 位 =  1 的个数</span>
BITCOUNT destmap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使一天产生一个亿的数据，Bitmap 占用的内存也不大，大约占 12 MB 的内存（10^8/8/1024/1024），7 天的 Bitmap 的内存开销约为 84 MB。同时我们最好给 Bitmap 设置过期时间，让 Redis 删除过期的打卡数据，节省内存。</p><h1 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog" aria-hidden="true">#</a> HyperLogLog</h1><h2 id="介绍-6" tabindex="-1"><a class="header-anchor" href="#介绍-6" aria-hidden="true">#</a> 介绍</h2><p>Redis HyperLogLog 是 Redis 2.8.9 版本新增的数据类型，是一种用于「统计基数」的数据集合类型，<strong>基数统计就是指统计一个集合中不重复的元素个数</strong>。但要注意，HyperLogLog 是统计规则是基于概率完成的，不是非常准确，标准误算率是 0.81%。</p><p>所以，简单来说 HyperLogLog <strong>提供不精确的去重计数</strong>。</p><p><strong>HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的内存空间总是固定的、并且是很小的。</strong></p><p>在 Redis 里面，<strong>每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近</strong> <strong>2^64</strong> <strong>个不同元素的基数</strong>，<strong>和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。</strong></p><p>这什么概念？举个例子给大家对比一下。</p><p>用 Java 语言来说，一般 long 类型占用 8 字节，而 1 字节有 8 位，即：1 byte = 8 bit，即 long 数据类型最大可以表示的数是：2<sup>63-1。对应上面的2</sup>64个数，假设此时有2^63-1这么多个数，从 0 ~ 2^63-1，按照long以及1k = 1024 字节的规则来计算内存总数，就是：((2^63-1) * 8/1024)K，这是很庞大的一个数，存储空间远远超过12K，而 HyperLogLog 却可以用 12K 就能统计完。</p><h2 id="内部实现-6" tabindex="-1"><a class="header-anchor" href="#内部实现-6" aria-hidden="true">#</a> 内部实现</h2>`,52),f={href:"https://en.wikipedia.org/wiki/HyperLogLog",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="常见命令" tabindex="-1"><a class="header-anchor" href="#常见命令" aria-hidden="true">#</a> 常见命令</h2><p>HyperLogLog 命令很少，就三个。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加指定元素到 HyperLogLog 中</span>
PFADD key element <span class="token punctuation">[</span>element <span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 返回给定 HyperLogLog 的基数估算值。</span>
PFCOUNT key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 将多个 HyperLogLog 合并为一个 HyperLogLog</span>
PFMERGE destkey sourcekey <span class="token punctuation">[</span>sourcekey <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-6" tabindex="-1"><a class="header-anchor" href="#应用场景-6" aria-hidden="true">#</a> 应用场景</h2><h3 id="百万级网页-uv-计数" tabindex="-1"><a class="header-anchor" href="#百万级网页-uv-计数" aria-hidden="true">#</a> 百万级网页 UV 计数</h3><p>Redis HyperLogLog 优势在于只需要花费 12 KB 内存，就可以计算接近 2^64 个元素的基数，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。</p><p>所以，非常适合统计百万级以上的网页 UV 的场景。</p><p>在统计 UV 时，你可以用 PFADD 命令（用于向 HyperLogLog 中添加新元素）把访问页面的每个用户都添加到 HyperLogLog 中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PFADD page1:uv user1 user2 user3 user4 user5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，就可以用 PFCOUNT 命令直接获得 page1 的 UV 值了，这个命令的作用就是返回 HyperLogLog 的统计结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PFCOUNT page1:uv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过，有一点需要你注意一下，HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%。</p><p>这也就意味着，你使用 HyperLogLog 统计的 UV 是 100 万，但实际的 UV 可能是 101 万。虽然误差率不算大，但是，<strong>如果需要精确统计结果的话，最好还是继续用 Set 或 Hash 类型。</strong></p><h1 id="geo" tabindex="-1"><a class="header-anchor" href="#geo" aria-hidden="true">#</a> GEO</h1><p>Redis GEO 是 Redis 3.2 版本新增的数据类型，<strong>主要用于存储地理位置信息，并对存储的信息进行操作。</strong></p><p>在日常生活中，我们越来越依赖搜索“附近的餐馆”、在打车软件上叫车，这些都离不开基于位置信息服务（Location-Based Service，LBS）的应用。<strong>LBS 应用访问的数据是和人或物关联的一组经纬度信息，而且要能查询相邻的经纬度范围</strong>，GEO 就非常适合应用在 LBS 服务的场景中。</p><h2 id="内部实现-7" tabindex="-1"><a class="header-anchor" href="#内部实现-7" aria-hidden="true">#</a> 内部实现</h2><p>GEO 本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。</p><p><strong>GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换</strong>，这其中的两个关键机制就是**「对二维地图做区间划分」和「对区间进行编码」**。<strong>一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Sorted Set 元素的权重分数。</strong></p><p>这样一来，我们就可以<strong>把经纬度保存到 Sorted Set 中，利用 Sorted Set 提供的“按权重进行有序范围查找”的特性，实现 LBS 服务中频繁使用的“搜索附近”的需求。</strong></p><h2 id="常用命令-5" tabindex="-1"><a class="header-anchor" href="#常用命令-5" aria-hidden="true">#</a> 常用命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中。</span>
GEOADD key longitude latitude member <span class="token punctuation">[</span>longitude latitude member <span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 从给定的 key 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。</span>
GEOPOS key member <span class="token punctuation">[</span>member <span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 返回两个给定位置之间的距离。</span>
GEODIST key member1 member2 <span class="token punctuation">[</span>m<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi<span class="token punctuation">]</span>

<span class="token comment"># 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</span>
GEORADIUS key longitude latitude radius m<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>WITHCOORD<span class="token punctuation">]</span> <span class="token punctuation">[</span>WITHDIST<span class="token punctuation">]</span> <span class="token punctuation">[</span>WITHHASH<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>ASC<span class="token operator">|</span>DESC<span class="token punctuation">]</span> <span class="token punctuation">[</span>STORE key<span class="token punctuation">]</span> <span class="token punctuation">[</span>STOREDIST key<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景-7" tabindex="-1"><a class="header-anchor" href="#应用场景-7" aria-hidden="true">#</a> 应用场景</h2><h3 id="滴滴叫车" tabindex="-1"><a class="header-anchor" href="#滴滴叫车" aria-hidden="true">#</a> 滴滴叫车</h3><p>这里以滴滴叫车的场景为例，介绍下具体如何使用 GEO 命令：GEOADD 和 GEORADIUS 这两个命令。</p><p>假设车辆 ID 是 33，经纬度位置是（116.034579，39.030452），我们可以用一个 GEO 集合保存所有车辆的经纬度，集合 key 是 cars:locations。</p><p>执行下面的这个命令，就可以把 ID 号为 33 的车辆的当前经纬度位置存入 GEO 集合中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GEOADD cars:locations <span class="token number">116.034579</span> <span class="token number">39.030452</span> <span class="token number">33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当用户想要寻找自己附近的网约车时，LBS 应用就可以使用 GEORADIUS 命令。</p><p>例如，LBS 应用执行下面的命令时，Redis 会根据输入的用户的经纬度信息（116.054579，39.030452 ），查找以这个经纬度为中心的 5 公里内的车辆信息，并返回给 LBS 应用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GEORADIUS cars:locations <span class="token number">116.054579</span> <span class="token number">39.030452</span> <span class="token number">5</span> km ASC COUNT <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h1><h2 id="介绍-7" tabindex="-1"><a class="header-anchor" href="#介绍-7" aria-hidden="true">#</a> 介绍</h2><p>Redis Stream 是 Redis 5.0 版本新增加的数据类型，<strong>Redis 专门为消息队列设计的数据类型。</strong></p><p>在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如：</p><ul><li><p>发布订阅模式</p></li><li><ul><li>不能持久化也就无法可靠的保存消息</li><li>对于离线重连的客户端不能读取历史消息的缺陷</li></ul></li><li><p>List 实现消息队列</p></li><li><ul><li>不能重复消费，一个消息消费完就会被删除</li><li>生产者需要自行实现全局唯一 ID</li></ul></li></ul><p>基于以上问题，Redis 5.0 便推出了 Stream 类型也是此版本最重要的功能，<strong>用于完美地实现消息队列，它支持消息的持久化、支持自动生成全局唯一 ID、支持 ack 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠。</strong></p><h2 id="常见命令-1" tabindex="-1"><a class="header-anchor" href="#常见命令-1" aria-hidden="true">#</a> 常见命令</h2><p>Stream 消息队列操作命令：</p><ul><li><p>XADD：插入消息，保证有序，可以自动生成全局唯一 ID；</p></li><li><p>XLEN ：查询消息长度；</p></li><li><p>XREAD：用于读取消息，可以按 ID 读取数据；</p></li><li><p>XDEL ： 根据消息 ID 删除消息；</p></li><li><p>DEL ：删除整个 Stream；</p></li><li><p>XRANGE ：读取区间消息</p></li><li><p>XREADGROUP：按消费组形式读取消息；</p></li><li><p>XPENDING 和 XACK：</p></li><li><ul><li>XPENDING 命令可以用来查询每个消费组内所有消费者「已读取、但尚未确认」的消息；</li><li>XACK 命令用于向消息队列确认消息处理已完成；</li></ul></li></ul><h2 id="应用场景-8" tabindex="-1"><a class="header-anchor" href="#应用场景-8" aria-hidden="true">#</a> 应用场景</h2><h3 id="消息队列-1" tabindex="-1"><a class="header-anchor" href="#消息队列-1" aria-hidden="true">#</a> 消息队列</h3><p>生产者通过 XADD 命令插入一条消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># * 表示让 Redis 为插入的数据自动生成一个全局唯一的 ID</span>
<span class="token comment"># 往名称为 mymq 的消息队列中插入一条消息，消息的键是 name，值是 xiaolin</span>
<span class="token operator">&gt;</span> XADD mymq * name xiaolin
<span class="token string">&quot;1654254953808-0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入成功后会返回全局唯一的 ID：&quot;1654254953808-0&quot;。</p><p>消息的全局唯一 ID 由两部分组成：</p><ul><li>第一部分“1654254953808”是数据插入时，<strong>以毫秒为单位计算的当前服务器时间</strong>；</li><li>第二部分表示<strong>插入消息在当前毫秒内的消息序号，这是从 0 开始编号的</strong>。例如，“1654254953808-0”就表示在“1654254953808”毫秒内的第 1 条消息。</li></ul><p>消费者通过 XREAD 命令从消息队列中读取消息时，可以指定一个消息 ID，并从这个消息 ID 的下一条消息开始进行读取（注意是输入消息 ID 的下一条信息开始读取，不是查询输入ID的消息）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从 ID 号为 1654254953807-0 的消息开始，读取后续的所有消息（示例中一共 1 条）。</span>
<span class="token operator">&gt;</span> XREAD STREAMS mymq <span class="token number">1654254953807</span>-0
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;mymq&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654254953808-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaolin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<strong>想要实现阻塞读（当没有数据时，阻塞住），可以调用 XRAED 时设定 BLOCK 配置项</strong>，实现类似于 BRPOP 的阻塞读取操作。</p><p>比如，下面这命令，设置了 BLOCK 10000 的配置项，10000 的单位是毫秒，表明 XREAD 在读取最新消息时，如果没有消息到来，XREAD 将阻塞 10000 毫秒（即 10 秒），然后再返回。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令最后的“$”符号表示读取最新的消息</span>
<span class="token operator">&gt;</span> XREAD BLOCK <span class="token number">10000</span> STREAMS mymq $
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">10</span>.00s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Stream 的基础方法，使用 xadd 存入消息和 xread 循环阻塞读取消息的方式可以实现简易版的消息队列</strong>，交互流程如下图所示：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735955.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>前面介绍的这些操作 List 也支持的，接下来看看 Stream 特有的功能。</p><p>Stream 可以以使用 <strong>XGROUP 创建消费组</strong>，创建消费组之后，Stream 可以使用 XREADGROUP 命令让消费组内的消费者读取消息。</p><p>创建两个消费组，这两个消费组消费的消息队列是 mymq，都指定从第一条消息开始读取：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个名为 group1 的消费组，0-0 表示从第一条消息开始读取。</span>
<span class="token operator">&gt;</span> XGROUP CREATE mymq group1 <span class="token number">0</span>-0
OK
<span class="token comment"># 创建一个名为 group2 的消费组，0-0 表示从第一条消息开始读取。</span>
<span class="token operator">&gt;</span> XGROUP CREATE mymq group2 <span class="token number">0</span>-0
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费组 group1 内的消费者 consumer1 从 mymq 消息队列中读取所有消息的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令最后的参数“&gt;”，表示从第一条尚未被消费的消息开始读取。</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP group1 consumer1 STREAMS mymq <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;mymq&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654254953808-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaolin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>消息队列中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了，即同一个消费组里的消费者不能消费同一条消息</strong>。</p><p>比如说，我们执行完刚才的 XREADGROUP 命令后，再执行一次同样的命令，此时读到的就是空值了：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> XREADGROUP GROUP group1 consumer1 STREAMS mymq <span class="token operator">&gt;</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，<strong>不同消费组的消费者可以消费同一条消息（但是有前提条件，创建消息组的时候，不同消费组指定了相同位置开始读取消息）</strong>。</p><p>比如说，刚才 group1 消费组里的 consumer1 消费者消费了一条 id 为 1654254953808-0 的消息，现在用 group2 消费组里的 consumer1 消费者消费消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> XREADGROUP GROUP group2 consumer1 STREAMS mymq <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;mymq&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654254953808-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaolin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我创建两组的消费组都是从第一条消息开始读取，所以可以看到第二组的消费者依然可以消费 id 为 1654254953808-0 的这一条消息。因此，不同的消费组的消费者可以消费同一条消息。</p><p><strong>使用消费组的目的是让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</strong></p><p>例如，我们执行下列命令，让 group2 中的 consumer1、2、3 各自读取一条消息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 让 group2 中的 consumer1 从 mymq 消息队列中消费一条消息</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP group2 consumer1 COUNT <span class="token number">1</span> STREAMS mymq <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;mymq&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654254953808-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaolin&quot;</span>
<span class="token comment"># 让 group2 中的 consumer2 从 mymq 消息队列中消费一条消息</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP group2 consumer2 COUNT <span class="token number">1</span> STREAMS mymq <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;mymq&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654256265584-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;xiaolincoding&quot;</span>
<span class="token comment"># 让 group2 中的 consumer3 从 mymq 消息队列中消费一条消息</span>
<span class="token operator">&gt;</span> XREADGROUP GROUP group2 consumer3 COUNT <span class="token number">1</span> STREAMS mymq <span class="token operator">&gt;</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;mymq&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654256271337-0&quot;</span>
         <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
            <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Tom&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息？</p><p><strong>Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，直到消费者使用 XACK 命令通知 Streams“消息已经处理完成”。</strong></p><p><strong>消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成</strong>，整个流程的执行如下图所示：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684680901825-ff61ee30-7ce7-4418-a96c-d953158a5017.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>**如果消费者没有成功处理消息，它就不会给 Streams 发送 XACK 命令，消息仍然会留存。此时，**<strong>消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息</strong>。</p><p>例如，我们来查看一下 group2 中各个消费者已读取、但尚未确认的消息个数，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XPENDING mymq group2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;1654254953808-0&quot;</span>  <span class="token comment"># 表示 group2 中所有消费者读取的消息最小 ID</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;1654256271337-0&quot;</span>  <span class="token comment"># 表示 group2 中所有消费者读取的消息最大 ID</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;consumer1&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;consumer2&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;consumer3&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想查看某个消费者具体读取了哪些数据，可以执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看 group2 里 consumer2 已从 mymq 消息队列中读取了哪些消息</span>
<span class="token operator">&gt;</span> XPENDING mymq group2 - + <span class="token number">10</span> consumer2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1654256265584-0&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;consumer2&quot;</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">410700</span>
   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，consumer2 已读取的消息的 ID 是 1654256265584-0。</p><p><strong>一旦消息 1654256265584-0 被 consumer2 处理了，consumer2 就可以使用 XACK 命令通知 Streams，然后这条消息就会被删除</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> XACK mymq group2 <span class="token number">1654256265584</span>-0
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们再使用 XPENDING 命令查看时，就可以看到，consumer2 已经没有已读取、但尚未确认处理的消息了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> XPENDING mymq group2 - + <span class="token number">10</span> consumer2
<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，基于 Stream 实现的消息队列就说到这里了，小结一下：</p><ul><li>消息保序：XADD/XREAD</li><li>阻塞读取：XREAD block</li><li>重复消息处理：Stream 在使用 XADD 命令，会自动生成全局唯一 ID；</li><li>消息可靠性：内部使用 PENDING List 自动保存消息，使用 XPENDING 命令查看消费组已经读取但是未被确认的消息，消费者使用 XACK 确认消息；</li><li>支持消费组形式消费数据</li></ul><p>Redis 基于 Stream 的消息队列与专业的消息队列有哪些差距？</p><p><strong>一个专业的消息队列，必须要做到两大块：</strong></p><ul><li><strong>消息不丢。</strong></li><li><strong>消息可堆积。</strong></li></ul><p><em>1、Redis Stream 消息会丢失吗？</em></p><p>使用一个消息队列，其实就分为三大块：<strong>生产者、队列中间件、消费者</strong>，所以要保证消息就是保证三个环节都不能丢失数据。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735073.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Redis Stream 消息队列能不能保证三个环节都不丢失数据？</p>`,93),E=t("<li><p>Redis 生产者会不会丢消息？</p></li><li><ul><li>取决于生产者对于异常情况的处理是否合理。 从消息被生产出来，然后提交给 MQ 的过程中，<strong>只要能正常收到 （ MQ 中间件） 的 ack 确认响应，就表示发送成功，所以只要处理好返回值和异常，如果返回异常则进行消息重发</strong>，那么这个阶段是不会出现消息丢失的。</li></ul></li><li><p>Redis 消费者会不会丢消息？</p></li><li><ul><li>不会，因为 **Stream （ MQ 中间件）会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，但是未被确认的消息。**消费者可以在重启后，用 XPENDING 命令查看已读取、但尚未确认处理完成的消息。<strong>等到消费者执行完业务逻辑后，再发送消费确认 XACK 命令，也能保证消息的不丢失。</strong></li></ul></li><li><p>Redis 消息中间件会不会丢消息？</p></li><li><ul><li><strong>会</strong>，Redis 在以下 2 个场景下，都会导致数据丢失：</li></ul></li>",6),x=n("li",null,[s("AOF 持久化配置为每秒写盘，但这个"),n("strong",null,"写盘过程是异步的"),s("，Redis 宕机时会存在数据丢失的可能")],-1),D=n("strong",null,"主从复制也是异步的",-1),L={href:"https://xiaolincoding.com/redis/cluster/master_slave_replication.html#redis-%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1",target:"_blank",rel:"noopener noreferrer"},O=t("<p>可以看到，Redis 在队列中间件环节无法保证消息不丢。</p><p><strong>像 RabbitMQ 或 Kafka 这类专业的队列中间件，在使用时是部署一个集群，生产者在发布消息时，队列中间件通常会写「多个节点」，也就是有多个副本，这样一来，即便其中一个节点挂了，也能保证集群的数据不丢失。</strong></p><p><em>2、Redis Stream 消息可堆积吗？</em></p><p><strong>Redis 的数据都存储在内存中，这就意味着一旦发生消息积压，则会导致 Redis 的内存持续增长，如果超过机器内存上限，就会面临被 OOM 的风险。</strong></p><p>所以 Redis 的 Stream 提供了可以指定队列最大长度的功能，就是为了避免这种情况发生。</p><p>当指定队列最大长度时，队列长度超过上限后，旧消息会被删除，只保留固定长度的新消息。这么来看，Stream 在消息积压时，如果指定了最大长度，还是有可能丢失消息的。</p><p><strong>但 Kafka、RabbitMQ 专业的消息队列它们的数据都是存储在磁盘上，当消息积压时，无非就是多占用一些磁盘空间。</strong></p><p>因此，<strong>把 Redis 当作消息队列来使用时，会面临的 2 个问题：</strong></p><ul><li><strong>Redis 本身可能会丢数据；</strong></li><li><strong>面对消息挤压，内存资源会紧张；</strong></li></ul><p>所以，<strong>能不能将 Redis 作为消息队列来使用，关键看你的业务场景：</strong></p><ul><li>如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。</li><li><strong>如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。</strong></li></ul><p>补充：Redis 发布/订阅机制为什么不可以作为消息队列？</p><p>发布订阅机制存在以下缺点，都是跟丢失数据有关：</p><ul><li><strong>发布/订阅机制没有基于任何数据类型实现，所以不具备「数据持久化」的能力</strong>，也就是发布/订阅机制的相关操作，不会写入到 RDB 和 AOF 中，当 Redis 宕机重启，发布/订阅机制的数据也会全部丢失。</li><li><strong>发布订阅模式是“发后既忘”的工作模式，如果有订阅者离线重连之后不能消费之前的历史消息。</strong></li><li>当消费端有一定的消息积压时，也就是生产者发送的消息，消费者消费不过来时，如果超过 32M 或者是 60s 内持续保持在 8M 以上，消费端会被强行断开，这个参数是在配置文件中设置的，默认值是 client-output-buffer-limit pubsub 32mb 8mb 60。</li></ul>",14),A=n("strong",null,"发布/订阅机制只适合即时通讯的场景",-1),B={href:"https://xiaolincoding.com/redis/cluster/sentinel.html#%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E6%88%90%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},I=t('<h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>Redis 常见的五种数据类型：<strong>String（字符串），Hash（哈希），List（列表），Set（集合）及 Zset(sorted set：有序集合)</strong>。</p><p><strong>这五种数据类型都由多种数据结构实现的，主要是出于时间和空间的考虑，当数据量小的时候使用更简单的数据结构，有利于节省内存，提高性能。</strong></p><p>这五种数据类型与底层数据结构对应关系图如下，左边是 Redis 3.0版本的，也就是《Redis 设计与实现》这本书讲解的版本，现在看还是有点过时了，右边是现在 Github 最新的 Redis 代码的。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020735382.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，Redis 数据类型的底层数据结构随着版本的更新也有所不同，比如：</p><ul><li>在 Redis 3.0 版本中 List 对象的底层数据结构由「双向链表」或「压缩表列表」实现，但是在 3.2 版本之后，List 数据类型底层数据结构是由 quicklist 实现的；</li><li>在最新的 Redis 代码中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</li></ul><p>Redis 五种数据类型的应用场景：</p><ul><li><strong>String 类型的应用场景：缓存对象、常规计数、分布式锁、共享session信息等。</strong></li><li><strong>List 类型的应用场景：消息队列（有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。</strong></li><li><strong>Hash 类型：缓存对象、购物车等。</strong></li><li><strong>Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</strong></li><li><strong>Zset 类型：排序场景，比如排行榜、电话和姓名排序等。</strong></li></ul><p>Redis 后续版本又支持四种数据类型，它们的应用场景如下：</p><ul><li><strong>BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</strong></li><li><strong>HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；</strong></li><li><strong>GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；</strong></li><li><strong>Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。</strong></li></ul><p>针对 Redis 是否适合做消息队列，关键看你的业务场景：</p><ul><li><strong>如果你的业务场景足够简单，对于数据丢失不敏感，而且消息积压概率比较小的情况下，把 Redis 当作队列是完全可以的。</strong></li><li><strong>如果你的业务有海量消息，消息积压的概率比较大，并且不能接受数据丢失，那么还是用专业的消息队列中间件吧。</strong></li></ul><hr><p>参考资料：</p>',15),T=n("li",null,"《Redis 核心技术与实战》",-1),P={href:"https://www.cnblogs.com/hunternet/p/12742390.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.cnblogs.com/qdhxhz/p/15669348.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.cnblogs.com/bbgs-xc/p/14376109.html",target:"_blank",rel:"noopener noreferrer"},G={href:"http://kaito-kidd.com/2021/04/19/can-redis-be-used-as-a-queue/",target:"_blank",rel:"noopener noreferrer"};function H(X,C){const a=p("ExternalLinkIcon");return l(),o("div",null,[r,u,d,m,n("p",null,[s("PS：你可以自己本机安装 Redis 或者通过 Redis 官网提供的"),n("a",v,[s("在线 Redis 环境(opens new window)"),e(a)]),s("来敲命令。")]),b,g,k,n("h3",h,[y,s(),n("a",S,[s("#"),e(a)]),s("常用命令")]),q,n("p",null,[s("HyperLogLog 的实现涉及到很多数学问题，太费脑子了，我也没有搞懂，如果你想了解一下，课下可以看看这个："),n("a",f,[s("HyperLogLog(opens new window)"),e(a)]),s("。")]),R,n("ul",null,[E,n("li",null,[n("ul",null,[n("li",null,[n("ul",null,[x,n("li",null,[D,s("，"),n("a",L,[s("主从切换时，也存在丢失数据的可能(opens new window)"),e(a)]),s("。")])])])])])]),O,n("p",null,[s("所以，"),A,s("，比如"),n("a",B,[s("构建哨兵集群(opens new window)"),e(a)]),s("的场景采用了发布/订阅机制。")]),I,n("ul",null,[T,n("li",null,[n("a",P,[s("https://www.cnblogs.com/hunternet/p/12742390.html"),e(a)])]),n("li",null,[n("a",N,[s("https://www.cnblogs.com/qdhxhz/p/15669348.html"),e(a)])]),n("li",null,[n("a",_,[s("https://www.cnblogs.com/bbgs-xc/p/14376109.html"),e(a)])]),n("li",null,[n("a",G,[s("http://kaito-kidd.com/2021/04/19/can-redis-be-used-as-a-queue/"),e(a)])])])])}const U=i(c,[["render",H],["__file","2.html.vue"]]);export{U as default};
