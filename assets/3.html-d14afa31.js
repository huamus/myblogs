const e=JSON.parse('{"key":"v-62a840e5","path":"/knowledgeBase/xiaolinCoding/MySQL/5.lockChapter/3.html","title":"3. update 没加索引会锁全表？","lang":"zh-CN","frontmatter":{"title":"3. update 没加索引会锁全表？","description":"大概就是，在线上执行一条 update 语句修改数据库数据的时候，where 条件没有带上索引，导致业务直接崩了，被老板教训了一波。 这次我们就来看看： 为什么会发生这种的事故？ 又该如何避免这种事故的发生？ 说个前提，接下来说的案例都是基于 InnoDB 存储引擎，且事务的隔离级别是可重复读。 为什么会发生这种的事故？ InnoDB 存储引擎的默认事务隔离级别是「可重复读」，但是在这个隔离级别下，在多个事务并发的时候，会出现幻读的问题，所谓的幻读是指在同一事务下，连续执行两次同样的查询语句，第二次的查询语句可能会返回之前不存在的行。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myblogs/knowledgeBase/xiaolinCoding/MySQL/5.lockChapter/3.html"}],["meta",{"property":"og:site_name","content":"huamus"}],["meta",{"property":"og:title","content":"3. update 没加索引会锁全表？"}],["meta",{"property":"og:description","content":"大概就是，在线上执行一条 update 语句修改数据库数据的时候，where 条件没有带上索引，导致业务直接崩了，被老板教训了一波。 这次我们就来看看： 为什么会发生这种的事故？ 又该如何避免这种事故的发生？ 说个前提，接下来说的案例都是基于 InnoDB 存储引擎，且事务的隔离级别是可重复读。 为什么会发生这种的事故？ InnoDB 存储引擎的默认事务隔离级别是「可重复读」，但是在这个隔离级别下，在多个事务并发的时候，会出现幻读的问题，所谓的幻读是指在同一事务下，连续执行两次同样的查询语句，第二次的查询语句可能会返回之前不存在的行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-01T20:31:07.000Z"}],["meta",{"property":"article:author","content":"huamus"}],["meta",{"property":"article:modified_time","content":"2023-07-01T20:31:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. update 没加索引会锁全表？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-01T20:31:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"huamus\\",\\"url\\":\\"https://huamus.github.io/mynotes/\\"}]}"]]},"headers":[],"git":{"createdTime":1688243467000,"updatedTime":1688243467000,"contributors":[{"name":"huamus","email":"1943805462@qq.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1458},"filePathRelative":"knowledgeBase/xiaolinCoding/MySQL/5.lockChapter/3.md","localizedDate":"2023年7月1日","excerpt":"<p>大概就是，在线上执行一条 update 语句修改数据库数据的时候，where 条件没有带上索引，导致业务直接崩了，被老板教训了一波。</p>\\n<p>这次我们就来看看：</p>\\n<ul>\\n<li>为什么会发生这种的事故？</li>\\n<li>又该如何避免这种事故的发生？</li>\\n</ul>\\n<p>说个前提，接下来说的案例都是基于 InnoDB 存储引擎，且事务的隔离级别是可重复读。</p>\\n<h1> 为什么会发生这种的事故？</h1>\\n<p>InnoDB 存储引擎的默认事务隔离级别是「可重复读」，但是在这个隔离级别下，在多个事务并发的时候，会出现幻读的问题，<strong>所谓的幻读是指在同一事务下，连续执行两次同样的查询语句，第二次的查询语句可能会返回之前不存在的行</strong>。</p>","autoDesc":true}');export{e as data};
