const e=JSON.parse('{"key":"v-53129349","path":"/knowledgeBase/xiaolinCoding/operatingSystem/5.precessManagement/5.4.html","title":"5.4 怎么避免死锁？","lang":"zh-CN","frontmatter":{"title":"5.4 怎么避免死锁？","description":"面试过程中，死锁也是高频的考点，因为如果线上环境真多发生了死锁，那真的出大事了。 这次，我们就来系统地聊聊死锁的问题。 死锁的概念； 模拟死锁问题的产生； 利用工具排查死锁问题； 避免死锁问题的发生； 死锁的概念 在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。 那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成两个线程都在等待对方释放锁，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了死锁。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myblogs/knowledgeBase/xiaolinCoding/operatingSystem/5.precessManagement/5.4.html"}],["meta",{"property":"og:site_name","content":"huamus"}],["meta",{"property":"og:title","content":"5.4 怎么避免死锁？"}],["meta",{"property":"og:description","content":"面试过程中，死锁也是高频的考点，因为如果线上环境真多发生了死锁，那真的出大事了。 这次，我们就来系统地聊聊死锁的问题。 死锁的概念； 模拟死锁问题的产生； 利用工具排查死锁问题； 避免死锁问题的发生； 死锁的概念 在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。 那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成两个线程都在等待对方释放锁，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了死锁。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-01T14:16:49.000Z"}],["meta",{"property":"article:author","content":"huamus"}],["meta",{"property":"article:modified_time","content":"2023-07-01T14:16:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.4 怎么避免死锁？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-01T14:16:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"huamus\\",\\"url\\":\\"https://huamus.github.io/mynotes/\\"}]}"]]},"headers":[{"level":2,"title":"死锁的概念","slug":"死锁的概念","link":"#死锁的概念","children":[{"level":3,"title":"互斥条件","slug":"互斥条件","link":"#互斥条件","children":[]},{"level":3,"title":"持有并等待条件","slug":"持有并等待条件","link":"#持有并等待条件","children":[]},{"level":3,"title":"不可剥夺条件","slug":"不可剥夺条件","link":"#不可剥夺条件","children":[]},{"level":3,"title":"环路等待条件","slug":"环路等待条件","link":"#环路等待条件","children":[]}]},{"level":2,"title":"模拟死锁问题的产生","slug":"模拟死锁问题的产生","link":"#模拟死锁问题的产生","children":[]},{"level":2,"title":"利用工具排查死锁问题","slug":"利用工具排查死锁问题","link":"#利用工具排查死锁问题","children":[]},{"level":2,"title":"避免死锁问题的发生","slug":"避免死锁问题的发生","link":"#避免死锁问题的发生","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1688217081000,"updatedTime":1688221009000,"contributors":[{"name":"huamus","email":"1943805462@qq.com","commits":3}]},"readingTime":{"minutes":9.98,"words":2993},"filePathRelative":"knowledgeBase/xiaolinCoding/operatingSystem/5.precessManagement/5.4.md","localizedDate":"2023年7月1日","excerpt":"<p>面试过程中，死锁也是高频的考点，因为如果线上环境真多发生了死锁，那真的出大事了。</p>\\n<p>这次，我们就来系统地聊聊死锁的问题。</p>\\n<ul>\\n<li>死锁的概念；</li>\\n<li>模拟死锁问题的产生；</li>\\n<li>利用工具排查死锁问题；</li>\\n<li>避免死锁问题的发生；</li>\\n</ul>\\n<hr>\\n<h2> 死锁的概念</h2>\\n<p>在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。</p>\\n<p>那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成<strong>两个线程都在等待对方释放锁</strong>，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了<strong>死锁</strong>。</p>","autoDesc":true}');export{e as data};
