const e=JSON.parse('{"key":"v-578da4cb","path":"/knowledgeBase/xiaolinCoding/2.operatingSystem/4.memoryManagement/4.2.html","title":"4.2 malloc 是如何分配内存的？","lang":"zh-CN","frontmatter":{"title":"4.2 malloc 是如何分配内存的？","description":"Linux 进程的内存分布长什么样？ 在 Linux 操作系统中，虚拟地址空间的内部又被分为内核空间和用户空间两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示： img","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myblogs/knowledgeBase/xiaolinCoding/2.operatingSystem/4.memoryManagement/4.2.html"}],["meta",{"property":"og:site_name","content":"huamus"}],["meta",{"property":"og:title","content":"4.2 malloc 是如何分配内存的？"}],["meta",{"property":"og:description","content":"Linux 进程的内存分布长什么样？ 在 Linux 操作系统中，虚拟地址空间的内部又被分为内核空间和用户空间两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示： img"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-02T14:35:37.000Z"}],["meta",{"property":"article:author","content":"huamus"}],["meta",{"property":"article:modified_time","content":"2023-07-02T14:35:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.2 malloc 是如何分配内存的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-02T14:35:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"huamus\\",\\"url\\":\\"https://huamus.github.io/mynotes/\\"}]}"]]},"headers":[],"git":{"createdTime":1688308537000,"updatedTime":1688308537000,"contributors":[{"name":"huamus","email":"1943805462@qq.com","commits":1}]},"readingTime":{"minutes":9.99,"words":2998},"filePathRelative":"knowledgeBase/xiaolinCoding/2.operatingSystem/4.memoryManagement/4.2.md","localizedDate":"2023年7月2日","excerpt":"<h1> Linux 进程的内存分布长什么样？</h1>\\n<p>在 Linux 操作系统中，虚拟地址空间的内部又被分为<strong>内核空间和用户空间</strong>两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示：</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/huamus/picture-bed/main/img202307010611327.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{e as data};
