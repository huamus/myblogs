import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-f8d5f6b3.js";const p={},t=e(`<p>之前收到读者面试字节时，被问到一个关于 MySQL 的问题。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020314826.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684676653439-61e3d093-93da-4080-a253-14a0e6e3a665.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果对 MySQL 加锁机制比较熟悉的同学，应该一眼就能看出<strong>会发生死锁</strong>，但是具体加了什么锁而导致死锁，是需要我们具体分析的。</p><p>接下来，就跟聊聊上面两个事务执行 SQL 语句的过程中，加了什么锁，从而导致死锁的。</p><h1 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h1><p>先创建一张 t_student 表，假设除了 id 字段，其他字段都是普通字段。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_student<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>no<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>score<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，插入相关的数据后，t_student 表中的记录如下：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020314691.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="开始实验" tabindex="-1"><a class="header-anchor" href="#开始实验" aria-hidden="true">#</a> 开始实验</h1><p>在实验开始前，先说明下实验环境：</p><ul><li>MySQL 版本：8.0.26</li><li>隔离级别：可重复读（RR）</li></ul><p>启动两个事务，按照题目的 SQL 执行顺序，过程如下表格：</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684676653685-c215a98a-e174-4026-9ba9-85e1f40616b1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，事务 A 和 事务 B 都在执行 insert 语句后，都陷入了等待状态（前提没有打开死锁检测），也就是发生了死锁，因为都在相互等待对方释放锁。</p><h1 id="为什么会发生死锁" tabindex="-1"><a class="header-anchor" href="#为什么会发生死锁" aria-hidden="true">#</a> 为什么会发生死锁？</h1><p>我们可以通过 select * from performance_schema.data_locks\\G; 这条语句，查看事务执行 SQL 过程中加了什么锁。</p><p>接下来，针对每一条 SQL 语句分析具体加了什么锁。</p><h2 id="time-1-阶段加锁分析" tabindex="-1"><a class="header-anchor" href="#time-1-阶段加锁分析" aria-hidden="true">#</a> Time 1 阶段加锁分析</h2><p>Time 1 阶段，事务 A 执行以下语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 事务 A</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">begin</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> t_student <span class="token keyword">set</span> score <span class="token operator">=</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
<span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">0</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行 select * from performance_schema.data_locks\\G; 这条语句，查看事务 A 此时加了什么锁。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020314990.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图可以看到，共加了两个锁，分别是：</p><ul><li>表锁：X 类型的意向锁；</li><li>行锁：X 类型的间隙锁；</li></ul><p>这里我们重点关注行锁，图中 LOCK_TYPE 中的 RECORD 表示行级锁，而不是记录锁的意思，通过 LOCK_MODE 可以确认是 next-key 锁，还是间隙锁，还是记录锁：</p><ul><li>如果 LOCK_MODE 为 X，说明是 next-key 锁；</li><li>如果 LOCK_MODE 为 X, REC_NOT_GAP，说明是记录锁；</li><li>如果 LOCK_MODE 为 X, GAP，说明是间隙锁；</li></ul><p><strong>因此，此时事务 A 在主键索引（INDEX_NAME : PRIMARY）上加的是间隙锁，锁范围是</strong>**(20, 30)**。</p><p>间隙锁的范围(20, 30) ，是怎么确定的？</p><p>根据我的经验，如果 LOCK_MODE 是 next-key 锁或者间隙锁，那么 LOCK_DATA 就表示锁的范围最右值，此次的事务 A 的 LOCK_DATA 是 30。</p><p>然后锁范围的最左值是 t_student 表中 id 为 30 的上一条记录的 id 值，即 20。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020314788.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因此，间隙锁的范围(20, 30)。</p><h2 id="time-2-阶段加锁分析" tabindex="-1"><a class="header-anchor" href="#time-2-阶段加锁分析" aria-hidden="true">#</a> Time 2 阶段加锁分析</h2><p>Time 2 阶段，事务 B 执行以下语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 事务 B</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">begin</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> t_student <span class="token keyword">set</span> score <span class="token operator">=</span> <span class="token number">100</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
<span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">0</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行 select * from performance_schema.data_locks\\G; 这条语句，查看事务 B 此时加了什么锁。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684676654927-d454e1c7-5c1e-406e-ad1d-ed76ff192312.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图可以看到，行锁是 X 类型的间隙锁，间隙锁的范围是(20, 30)。</p><p>事务 A 和 事务 B 的间隙锁范围都是一样的，为什么不会冲突？</p><p><strong>两个事务的间隙锁之间是相互兼容的，不会产生冲突。</strong></p><p><strong>间隙锁的意义只在于阻止区间被插入</strong>，因此是可以共存的。<strong>一个事务获取的间隙锁不会阻止另一个事务获取同一个间隙范围的间隙锁</strong>，共享（S型）和排他（X型）的间隙锁是没有区别的，他们相互不冲突，且功能相同。</p><h2 id="time-3-阶段加锁分析" tabindex="-1"><a class="header-anchor" href="#time-3-阶段加锁分析" aria-hidden="true">#</a> Time 3 阶段加锁分析</h2><p>Time 3，事务 A 插入了一条记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Time 3 阶段，事务 A 插入了一条记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">no</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span>score<span class="token punctuation">)</span> <span class="token keyword">value</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;S0025&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sony&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/// 阻塞等待......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，事务 A 就陷入了等待状态。</p><p>然后执行 select * from performance_schema.data_locks\\G; 这条语句，查看事务 A 在获取什么锁而导致被阻塞。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684676655483-2c4407f5-6c31-4a1c-b1ff-aba15d945ed8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，事务 A 的状态为等待状态（LOCK_STATUS: WAITING），因为向事务 B 生成的间隙锁（范围 (20, 30)）中插入了一条记录，所以事务 A 的插入操作生成了一个插入意向锁（LOCK_MODE:INSERT_INTENTION）。</p><p>插入意向锁是什么？</p><p>注意！插入意向锁名字里虽然有意向锁这三个字，但是它并不是意向锁，它属于行级锁，是一种特殊的间隙锁。</p><p>尽管<strong>插入意向锁是一种特殊的间隙锁，但不同于间隙锁的是，该锁只用于并发插入操作</strong>。</p><p>如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。</p><p>插入意向锁与间隙锁的另一个非常重要的差别是：<strong>尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。所以，插入意向锁和间隙锁之间是冲突的</strong>。</p><p>另外，我补充一点，插入意向锁的生成时机：</p><ul><li>每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（<em>PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁</em>），现象就是 Insert 语句会被阻塞。</li></ul><h2 id="time-4-阶段加锁分析" tabindex="-1"><a class="header-anchor" href="#time-4-阶段加锁分析" aria-hidden="true">#</a> Time 4 阶段加锁分析</h2><p>Time 4，事务 B 插入了一条记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Time 4 阶段，事务 B 插入了一条记录</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">no</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span>score<span class="token punctuation">)</span> <span class="token keyword">value</span> <span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">&#39;S0026&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ace&#39;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/// 阻塞等待......</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，事务 B 就陷入了等待状态。</p><p>然后执行 select * from performance_schema.data_locks\\G; 这条语句，查看事务 B 在获取什么锁而导致被阻塞。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1684676655549-8b283f5e-b6d4-48dd-8a32-b5a90660d3be.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，事务 B 在生成插入意向锁时而导致被阻塞，这是因为事务 B 向事务 A 生成的范围为 (20, 30) 的间隙锁插入了一条记录，而插入意向锁和间隙锁是冲突的，所以事务 B 在获取插入意向锁时就陷入了等待状态。</p><p>最后回答，为什么会发生死锁？</p><p>本次案例中，事务 A 和事务 B 在执行完后 update 语句后都持有范围为(20, 30）的间隙锁，而接下来的插入操作为了获取到插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了循环等待，满足了死锁的四个条件：<strong>互斥、占有且等待、不可强占用、循环等待</strong>，因此发生了死锁。</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p><strong>两个事务即使生成的间隙锁的范围是一样的，也不会发生冲突，因为间隙锁目的是为了防止其他事务插入数据，因此间隙锁与间隙锁之间是相互兼容的。</strong></p><p><strong>在执行插入语句时，如果插入的记录在其他事务持有间隙锁范围内，插入语句就会被阻塞，因为插入语句在碰到间隙锁时，会生成一个插入意向锁，然后插入意向锁和间隙锁之间是互斥的关系。</strong></p><p><strong>如果两个事务分别向对方持有的间隙锁范围内插入一条记录，而插入操作为了获取到插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了循环等待，满足了死锁的四个条件：<strong><strong>互斥、占有且等待、不可强占用、循环等待</strong></strong>，因此发生了死锁。</strong></p><h1 id="读者问答" tabindex="-1"><a class="header-anchor" href="#读者问答" aria-hidden="true">#</a> 读者问答</h1><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307020314844.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,72),o=[t];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","6.html.vue"]]);export{d as default};
