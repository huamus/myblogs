import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as o,a as n,b as a,d as t,f as e}from"./app-39e7b6f2.js";const c={},l={href:"https://xiaolincoding.com/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"作者：小林coding",-1),d=e(`<h1 id="mysql-的数据存放在哪个文件" tabindex="-1"><a class="header-anchor" href="#mysql-的数据存放在哪个文件" aria-hidden="true">#</a> MySQL 的数据存放在哪个文件？</h1><p>大家都知道 MySQL 的数据都是保存在磁盘的，那具体是保存在哪个文件呢？</p><p>MySQL 存储的行为是由存储引擎实现的，MySQL 支持多种存储引擎，不同的存储引擎保存的文件自然也不同。</p><p>InnoDB 是我们常用的存储引擎，也是 MySQL 默认的存储引擎。所以，本文主要以 InnoDB 存储引擎展开讨论。</p><p>先来看看 MySQL 数据库的文件存放在哪个目录？</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;datadir&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------------+</span>
<span class="token operator">|</span> datadir       <span class="token operator">|</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们<strong>每创建一个 database（数据库） 都会在 /var/lib/mysql/ 目录里面创建一个以 database 为名的目录，然后保存表结构和表数据的文件都会存放在这个目录里。</strong></p><p>比如，我这里有一个名为 my_test 的 database，该 database 里有一张名为 t_order 数据库表。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401458.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后，我们进入 /var/lib/mysql/my_test 目录，看看里面有什么文件？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xiaolin ~<span class="token punctuation">]</span><span class="token comment">#ls /var/lib/mysql/my_test</span>
db.opt  
t_order.frm  
t_order.ibd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，共有三个文件，这三个文件分别代表着：</p><ul><li>db.opt，用来存储当前数据库的默认字符集和字符校验规则。</li><li>t_order.frm ，t_order 的<strong>表结构</strong>会保存在这个文件。在 MySQL 中建立一张表都会生成一个.frm 文件，该文件是用来保存每个表的元数据信息的，主要包含表结构定义。</li><li>t_order.ibd，t_order 的<strong>表数据</strong>会保存在这个文件。表数据既可以存在共享表空间文件（文件名：ibdata1）里，也可以存放在独占表空间文件（文件名：表名字.ibd）。这个行为是由参数 innodb_file_per_table 控制的，若设置了参数 innodb_file_per_table 为 1，则会将存储的数据、索引等信息单独存储在一个独占表空间，从 MySQL 5.6.6 版本开始，它的默认值就是 1 了，因此从这个版本之后， MySQL 中每一张表的数据都存放在一个独立的 .ibd 文件。</li></ul><p>好了，现在我们知道了<strong>一张数据库表的数据是保存在「 表名字.ibd 」的文件里的，这个文件也称为独占表空间文件。</strong></p><h2 id="表空间文件的结构是怎么样的" tabindex="-1"><a class="header-anchor" href="#表空间文件的结构是怎么样的" aria-hidden="true">#</a> 表空间文件的结构是怎么样的？</h2><p><strong>表空间由段（segment）、区（extent）、页（page）、行（row）组成</strong>，InnoDB存储引擎的逻辑存储结构大致如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241402100.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1、行-row" tabindex="-1"><a class="header-anchor" href="#_1、行-row" aria-hidden="true">#</a> 1、行（row）</h3><p><strong>数据库表中的记录都是按行（row）进行存放的</strong>，每行记录根据不同的行格式，有不同的存储结构。</p><p>后面我们详细介绍 InnoDB 存储引擎的行格式，也是本文重点介绍的内容。</p><h3 id="_2、页-page" tabindex="-1"><a class="header-anchor" href="#_2、页-page" aria-hidden="true">#</a> 2、页（page）</h3><p>记录是按照行来存储的，但是数据库的读取并不以「行」为单位，否则一次读取（也就是一次 I/O 操作）只能处理一行数据，效率会非常低。</p><p>因此，<strong>InnoDB 的数据是按「页」为单位来读写的</strong>，也就是说，当需要读一条记录的时候，并不是将这个行记录从磁盘读出来，而是以页为单位，将其整体读入内存。</p><p><strong>默认每个页的大小为 16KB</strong>，也就是最多能保证 16KB 的连续存储空间。</p><p><strong>页是 InnoDB 存储引擎磁盘管理的最小单元</strong>，意味着数据库每次读写都是以 16KB 为单位的，一次最少从磁盘中读取 16K 的内容到内存中，一次最少把内存中的 16K 内容刷新到磁盘中。</p>`,25),u={href:"https://xiaolincoding.com/mysql/index/page.html",target:"_blank",rel:"noopener noreferrer"},h=e('<p>总之知道表中的记录存储在「数据页」里面就行。</p><h3 id="_3、区-extent" tabindex="-1"><a class="header-anchor" href="#_3、区-extent" aria-hidden="true">#</a> 3、区（extent）</h3><p>我们知道 <strong>InnoDB 存储引擎是用 B+ 树来组织数据的。</strong></p><p><strong>B+ 树中每一层都是通过双向链表连接起来的</strong>。<strong>如果是以页为单位来分配存储空间，那么链表中相邻的两个页之间的物理位置并不是连续的，可能离得非常远，那么磁盘查询时就会有大量的随机I/O，随机 I/O 是非常慢的。</strong></p><p>解决这个问题也很简单，就是<strong>让链表中相邻的页的物理位置也相邻，这样就可以使用顺序 I/O 了，那么在范围查询（扫描叶子节点）的时候性能就会很高。</strong></p><p>那具体怎么解决呢？</p><p><strong>在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照区（extent）为单位分配。每个区的大小为 1MB，对于 16KB 的页来说，连续的 64 个页会被划为一个区，这样就使得链表中相邻的页的物理位置也相邻，就能使用顺序 I/O 了</strong>。</p><h3 id="_4、段-segment" tabindex="-1"><a class="header-anchor" href="#_4、段-segment" aria-hidden="true">#</a> 4、段（segment）</h3><p>表空间是由各个段（segment）组成的，段是由多个区（extent）组成的。段一般分为数据段、索引段和回滚段等。</p><ul><li><strong>索引段</strong>：<strong>存放 B + 树的非叶子节点的区的集合</strong>；</li><li><strong>数据段</strong>：<strong>存放 B + 树的叶子节点的区的集合</strong>；</li><li><strong>回滚段</strong>：<strong>存放的是回滚数据的区的集合</strong>。</li></ul><p>好了，终于说完表空间的结构了。接下来，就具体讲一下 InnoDB 的行格式了。</p><p>之所以要绕一大圈才讲行记录的格式，主要是想让大家知道行记录是存储在哪个文件，以及行记录在这个表空间文件中的哪个区域，有一个从上往下切入的视角，这样理解起来不会觉得很抽象。</p><h1 id="innodb-行格式有哪些" tabindex="-1"><a class="header-anchor" href="#innodb-行格式有哪些" aria-hidden="true">#</a> InnoDB 行格式有哪些？</h1><p><strong>行格式（row_format），就是一条记录的存储结构。</strong></p><p>InnoDB 提供了 4 种行格式，分别是 Redundant、Compact、Dynamic和 Compressed 行格式。</p><ul><li>Redundant 是很古老的行格式了， MySQL 5.0 版本之前用的行格式，现在基本没人用了。</li><li>由于 Redundant 不是一种紧凑的行格式，所以 MySQL 5.0 之后引入了 Compact 行记录存储方式，Compact 是一种紧凑的行格式，设计的初衷就是为了让一个数据页中可以存放更多的行记录，从 MySQL 5.1 版本之后，行格式默认设置成 Compact。</li><li>Dynamic 和 Compressed 两个都是紧凑的行格式，它们的行格式都和 Compact 差不多，因为都是基于 Compact 改进一点东西。从 MySQL5.7 版本之后，默认使用 Dynamic 行格式。</li></ul><p>所以，弄懂了 Compact 行格式，之后你们在去了解其他行格式，很快也能看懂。</p><h1 id="compact-行格式长什么样" tabindex="-1"><a class="header-anchor" href="#compact-行格式长什么样" aria-hidden="true">#</a> COMPACT 行格式长什么样？</h1><p>先跟 Compact 行格式混个脸熟，它长这样：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401495.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，一条完整的记录分为「记录的额外信息」和「记录的真实数据」两个部分。</p><h2 id="记录的额外信息" tabindex="-1"><a class="header-anchor" href="#记录的额外信息" aria-hidden="true">#</a> 记录的额外信息</h2><p>记录的额外信息包含 3 个部分：变长字段长度列表、NULL 值列表、记录头信息。</p><h3 id="_1-变长字段长度列表" tabindex="-1"><a class="header-anchor" href="#_1-变长字段长度列表" aria-hidden="true">#</a> 1. 变长字段长度列表</h3><p>varchar(n) 和 char(n) 的区别是什么，相信大家都非常清楚，char 是定长的，varchar 是变长的，变长字段实际存储的数据的长度（大小）不固定的。</p><p>所以，**在存储数据的时候，也要把数据占用的大小存起来，存到「变长字段长度列表」里面，读取数据的时候才能根据这个「变长字段长度列表」去读取对应长度的数据。**其他 TEXT、BLOB 等变长字段也是这么实现的。</p><p>为了展示「变长字段长度列表」具体是怎么保存「变长字段的真实数据占用的字节数」，我们先创建这样一张表，字符集是 ascii（所以每一个字符占用的 1 字节），行格式是 Compact，t_user 表中 name 和 phone 字段都是变长字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> ascii ROW_FORMAT <span class="token operator">=</span> COMPACT<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 t_user 表里有这三条记录：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401375.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，我们看看看看这三条记录的行格式中的 「变长字段长度列表」是怎样存储的。</p><p>先来看第一条记录：</p><ul><li>name 列的值为 a，真实数据占用的字节数是 1 字节，十六进制 0x01；</li><li>phone 列的值为 123，真实数据占用的字节数是 3 字节，十六进制 0x03；</li><li>age 列和 id 列不是变长字段，所以这里不用管。</li></ul><p>这些<strong>变长字段的真实数据占用的字节数会按照列的顺序****逆序存放</strong>（等下会说为什么要这么设计），所以「变长字段长度列表」里的内容是「 03 01」，而不是 「01 03」。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401622.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>同样的道理，我们也可以得出<strong>第二条记录</strong>的行格式中，「变长字段长度列表」里的内容是「 04 02」，如下图：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401405.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>第三条记录</strong>中 phone 列的值是 NULL，<strong>NULL 是不会存放在行格式中记录的真实数据部分里的</strong>，<strong>所以「变长字段长度列表」里不需要保存值为 NULL 的变长字段的长度。</strong></p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401557.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么「变长字段长度列表」的信息要按照逆序存放？</p><p>这个设计是有想法的，主要是因为「记录头信息」中指向下一个记录的指针，指向的是下一条记录的「记录头信息」和「真实数据」之间的位置，这样的好处是<strong>向左读就是记录头信息，向右读就是真实数据，比较方便。</strong></p><p>「变长字段长度列表」中的信息之所以要逆序存放，是因为这样可以<strong>使得位置靠前的记录的真实数据和数据对应的字段长度信息可以同时在一个 CPU Cache Line 中，这样就可以提高 CPU Cache 的命中率</strong>。</p><p>同样的道理， NULL 值列表的信息也需要逆序存放。</p><p>每个数据库表的行格式都有「变长字段字节数列表」吗？</p><p>其实变长字段字节数列表不是必须的。</p><p><strong>当数据表没有变长字段的时候，比如全部都是 int 类型的字段，这时候表里的行格式就不会有「变长字段长度列表」了</strong>，因为没必要，不如去掉以节省空间。</p><p>所以「变长字段长度列表」只出现在数据表有变长字段的时候。</p><h3 id="_2-null-值列表" tabindex="-1"><a class="header-anchor" href="#_2-null-值列表" aria-hidden="true">#</a> 2. NULL 值列表</h3><p>表中的某些列可能会存储 NULL 值，如果把这些 NULL 值都放到记录的真实数据中会比较浪费空间，所以 <strong>Compact 行格式把这些值为 NULL 的列存储到 NULL值列表中。</strong></p><p><strong>如果存在允许 NULL 值的列，则每个列对应一个二进制位（bit），二进制位按照列的顺序逆序排列。</strong></p><ul><li><strong>二进制位的值为<strong><strong>1</strong></strong>时，代表该列的值为NULL。</strong></li><li><strong>二进制位的值为<strong><strong>0</strong></strong>时，代表该列的值不为NULL。</strong></li></ul><p>另外，NULL 值列表必须用整数个字节的位表示（1字节8位），如果使用的二进制位个数不足整数个字节，则在字节的高位补 0。</p><p>还是以 t_user 表的这三条记录作为例子：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401712.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，我们看看看看这三条记录的行格式中的 NULL 值列表是怎样存储的。</p><p>先来看<strong>第一条记录</strong>，第一条记录所有列都有值，不存在 NULL 值，所以用二进制来表示是酱紫的：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401968.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是 InnoDB 是用整数字节的二进制位来表示 NULL 值列表的，现在不足 8 位，所以要在高位补 0，最终用二进制来表示是酱紫的：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241403968.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以，对于第一条数据，NULL 值列表用十六进制表示是 0x00。</p><p>接下来看<strong>第二条记录</strong>，第二条记录 age 列是 NULL 值，所以，对于第二条数据，NULL值列表用十六进制表示是 0x04。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241403349.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>最后<strong>第三条记录</strong>，第三条记录 phone 列 和 age 列是 NULL 值，所以，对于第三条数据，NULL 值列表用十六进制表示是 0x06。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401505.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们把三条记录的 NULL 值列表都填充完毕后，它们的行格式是这样的：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401269.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>每个数据库表的行格式都有「NULL 值列表」吗？</p><p>NULL 值列表也不是必须的。</p><p><strong>当数据表的字段都定义成 NOT NULL 的时候，这时候表里的行格式就不会有 NULL 值列表了</strong>。</p><p>所以<strong>在设计数据库表的时候，通常都是建议将字段设置为 NOT NULL，这样可以至少节省 1 字节的空间（NULL 值列表至少占用 1 字节空间）。</strong></p><p>「NULL 值列表」是固定 1 字节空间吗？如果这样的话，一条记录有 9 个字段值都是 NULL，这时候怎么表示？</p><p>「NULL 值列表」的空间不是固定 1 字节的。</p><p>当一条记录有 9 个字段值都是 NULL，那么就会创建 2 字节空间的「NULL 值列表」，以此类推。</p><h3 id="_3-记录头信息" tabindex="-1"><a class="header-anchor" href="#_3-记录头信息" aria-hidden="true">#</a> 3. 记录头信息</h3><p>记录头信息中包含的内容很多，这里说几个比较重要的：</p><ul><li><strong>delete_mask ：标识此条数据是否被删除。我们执行 delete 删除记录的时候，并不会真正的删除记录</strong>，只是将这个记录的 delete_mask 标记为 1。</li><li>**next_record：下一条记录的位置。记录与记录之间是通过链表组织的。**在前面我也提到了，指向的是下一条记录的「记录头信息」和「真实数据」之间的位置，这样的好处是向左读就是记录头信息，向右读就是真实数据，比较方便。</li><li><strong>record_type：表示当前记录的类型，0表示普通记录，1表示B+树非叶子节点记录，2表示最小记录，3表示最大记录。</strong></li></ul><h2 id="记录的真实数据" tabindex="-1"><a class="header-anchor" href="#记录的真实数据" aria-hidden="true">#</a> 记录的真实数据</h2><p><strong>记录真实数据部分除了我们定义的字段，还有三个隐藏字段</strong>，分别为：row_id、trx_id、roll_pointer。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401631.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>row_id</li></ul><p>如果我们建表的时候指定了主键或者唯一约束列，那么就没有 row_id 隐藏字段了。<strong>如果既没有指定主键，又没有唯一约束，那么 InnoDB 就会为记录添加 row_id 隐藏字段</strong>。row_id不是必需的，占用 6 个字节。</p><ul><li>trx_id</li></ul><p><strong>事务id，表示这个数据是由哪个事务生成的</strong>。 trx_id是必需的，占用 6 个字节。</p><ul><li>roll_pointer</li></ul><p>这条<strong>记录上一个版本的指针</strong>。roll_pointer 是必需的，占用 7 个字节。</p>',85),m={href:"https://xiaolincoding.com/mysql/transaction/mvcc.html",target:"_blank",rel:"noopener noreferrer"},L=e(`<h1 id="varchar-n-中-n-最大取值为多少" tabindex="-1"><a class="header-anchor" href="#varchar-n-中-n-最大取值为多少" aria-hidden="true">#</a> varchar(n) 中 n 最大取值为多少？</h1><p>我们要清楚一点，<strong>MySQL 规定除了 TEXT、BLOBs 这种大对象类型之外，其他所有的列（不包括隐藏列和记录头信息）占用的字节长度加起来不能超过 65535 个字节</strong>。</p><p>也就是说，一行记录除了 TEXT、BLOBs 类型的列，限制最大为 65535 字节，注意是一行的总长度，不是一列。</p><p>知道了这个前提之后，我们再来看看这个问题：「varchar(n) 中 n 最大取值为多少？」</p><p>varchar(n) 字段类型的 n 代表的是最多存储的字符数量，并不是字节大小哦。</p><p>要算 varchar(n) 最大能允许存储的字节数，还要看数据库表的字符集，因为字符集代表着，1个字符要占用多少字节，比如 ascii 字符集， 1 个字符占用 1 字节，那么 varchar(100) 意味着最大能允许存储 100 字节的数据。</p><h2 id="单字段的情况" tabindex="-1"><a class="header-anchor" href="#单字段的情况" aria-hidden="true">#</a> 单字段的情况</h2><p>前面我们知道了，一行记录最大只能存储 65535 字节的数据。</p><p>那假设数据库表只有一个 varchar(n) 类型的列且字符集是 ascii，在这种情况下， varchar(n) 中 n 最大取值是 65535 吗？</p><p>不着急说结论，我们先来做个实验验证一下。</p><p>我们定义一个 varchar(65535) 类型的字段，字符集为 ascii 的数据库表。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span> 
<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">65535</span><span class="token punctuation">)</span>  <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> ascii ROW_FORMAT <span class="token operator">=</span> COMPACT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看能不能成功创建一张表：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241401540.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，创建失败了。</p><p>从报错信息就可以知道<strong>一行数据的最大字节数是 65535（不包含 TEXT、BLOBs 这种大对象类型），其中包含了 storage overhead</strong>。</p><p>问题来了，这个 storage overhead 是什么呢？其实就是「变长字段长度列表」和 「NULL 值列表」，也就是说<strong>一行数据的最大字节数 65535，其实是包含「变长字段长度列表」和 「NULL 值列表」所占用的字节数的</strong>。所以， 我们在算 varchar(n) 中 n 最大值时，需要减去 storage overhead 占用的字节数。</p><p>这是因为我们<strong>存储字段类型为 varchar(n) 的数据时，其实分成了三个部分来存储：</strong></p><ul><li><strong>真实数据</strong></li><li><strong>真实数据占用的字节数</strong></li><li><strong>NULL 标识，如果不允许为NULL，这部分不需要</strong></li></ul><p>本次案例中，「NULL 值列表」所占用的字节数是多少？</p><p>前面我创建表的时候，字段是允许为 NULL 的，所以<strong>会用 1 字节来表示「NULL 值列表」</strong>。</p><p>本次案例中，「变长字段长度列表」所占用的字节数是多少？</p><p>「变长字段长度列表」所占用的字节数 = 所有「变长字段长度」占用的字节数之和。</p><p>所以，我们要先知道每个变长字段的「变长字段长度」需要用多少字节表示？具体情况分为：</p><ul><li>条件一：如果变长字段允许存储的最大字节数小于等于 255 字节，就会用 1 字节表示「变长字段长度」；</li><li>条件二：如果变长字段允许存储的最大字节数大于 255 字节，就会用 2 字节表示「变长字段长度」；</li></ul><p>我们这里字段类型是 varchar(65535) ，字符集是 ascii，所以代表着变长字段允许存储的最大字节数是 65535，符合条件二，所以会用 2 字节来表示「变长字段长度」。</p><p><strong>因为我们这个案例是只有 1 个变长字段，所以「变长字段长度列表」= 1 个「变长字段长度」占用的字节数，也就是 2 字节</strong>。</p><p>因为我们在算 varchar(n) 中 n 最大值时，需要减去 「变长字段长度列表」和 「NULL 值列表」所占用的字节数的。所以，<strong>在数据库表只有一个 varchar(n) 字段且字符集是 ascii 的情况下，varchar(n) 中 n 最大值 = 65535 - 2 - 1 = 65532</strong>。</p><p>我们先来测试看看 varchar(65533) 是否可行？</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241403933.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，还是不行，接下来看看 varchar(65532) 是否可行？</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241403160.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，创建成功了。说明我们的推论是正确的，<strong>在算 varchar(n) 中 n 最大值时，需要减去 「变长字段长度列表」和 「NULL 值列表」所占用的字节数的。</strong></p><p>当然，我上面这个例子是针对字符集为 ascii 情况，如果采用的是 UTF-8，varchar(n) 最多能存储的数据计算方式就不一样了：</p><ul><li>在 UTF-8 字符集下，一个字符最多需要三个字节，varchar(n) 的 n 最大取值就是 65532/3 = 21844。</li></ul><p>上面所说的只是针对于一个字段的计算方式。</p><h2 id="多字段的情况" tabindex="-1"><a class="header-anchor" href="#多字段的情况" aria-hidden="true">#</a> 多字段的情况</h2><p><strong>如果有多个字段的话，要保证所有字段的长度 + 变长字段字节数列表所占用的字节数 + NULL值列表所占用的字节数 &lt;= 65535</strong>。</p><p>这里举个多字段的情况的例子</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241403460.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="行溢出后-mysql-是怎么处理的" tabindex="-1"><a class="header-anchor" href="#行溢出后-mysql-是怎么处理的" aria-hidden="true">#</a> 行溢出后，MySQL 是怎么处理的？</h1><p><strong>MySQL 中磁盘和内存交互的基本单位是页，一个页的大小一般是</strong> <strong>16KB</strong>，也就是 16384字节，而一个 varchar(n) 类型的列最多可以存储 65532字节，一些大对象如 TEXT、BLOB 可能存储更多的数据，这时一个页可能就存不了一条记录。这个时候就会<strong>发生行溢出，多的数据就会存到另外的「溢出页」中</strong>。</p><p>如果一个数据页存不了一条记录，InnoDB 存储引擎会自动将溢出的数据存放到「溢出页」中。在一般情况下，InnoDB 的数据都是存放在 「数据页」中。</p><p><strong>当发生行溢出时，在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在「溢出页」中，然后真实数据处用 20 字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。</strong></p><p>大致如下图所示。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241402255.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面这个是 Compact 行格式在发生行溢出后的处理。</p><p>Compressed 和 Dynamic 这两个行格式和 Compact 非常类似，主要的区别在于处理行溢出数据时有些区别。</p><p>这两种格式采用完全的行溢出方式，记录的真实数据处不会存储该列的一部分数据，只存储 20 个字节的指针来指向溢出页。而<strong>实际的数据都存储在溢出页中</strong>，看起来就像下面这样：</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/202307241403155.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><h2 id="mysql-的-null-值是怎么存放的" tabindex="-1"><a class="header-anchor" href="#mysql-的-null-值是怎么存放的" aria-hidden="true">#</a> MySQL 的 NULL 值是怎么存放的？</h2><p><strong>MySQL 的 Compact 行格式中会用「NULL值列表」来标记值为 NULL 的列，NULL 值并不会存储在行格式中的真实数据部分。</strong></p><p>NULL值列表会占用 1 字节空间，当表中所有字段都定义成 NOT NULL，行格式中就不会有 NULL值列表，这样可节省 1 字节的空间。</p><h2 id="mysql-怎么知道-varchar-n-实际占用数据的大小" tabindex="-1"><a class="header-anchor" href="#mysql-怎么知道-varchar-n-实际占用数据的大小" aria-hidden="true">#</a> MySQL 怎么知道 varchar(n) 实际占用数据的大小？</h2><p>MySQL 的 Compact 行格式中会用**「变长字段长度列表」存储变长字段实际占用的数据大小。**</p><h2 id="varchar-n-中-n-最大取值为多少-1" tabindex="-1"><a class="header-anchor" href="#varchar-n-中-n-最大取值为多少-1" aria-hidden="true">#</a> varchar(n) 中 n 最大取值为多少？</h2><p>**一行记录最大能存储 65535 字节的数据，但是这个是包含「变长字段字节数列表所占用的字节数」和「NULL值列表所占用的字节数」。**所以， 我们在算 varchar(n) 中 n 最大值时，需要减去这两个列表所占用的字节数。</p><p>如果一张表只有一个 varchar(n) 字段，且允许为 NULL，字符集为 ascii。varchar(n) 中 n 最大取值为 65532。</p><p>计算公式：65535 - 变长字段字节数列表所占用的字节数 - NULL值列表所占用的字节数 = 65535 - 2 - 1 = 65532。</p><p>如果有多个字段的话，要保证所有字段的长度 + 变长字段字节数列表所占用的字节数 + NULL值列表所占用的字节数 &lt;= 65535。</p><h2 id="行溢出后-mysql-是怎么处理的-1" tabindex="-1"><a class="header-anchor" href="#行溢出后-mysql-是怎么处理的-1" aria-hidden="true">#</a> 行溢出后，MySQL 是怎么处理的？</h2><p><strong>如果一个数据页存不了一条记录，InnoDB 存储引擎会自动将溢出的数据存放到「溢出页」中。</strong></p><p>Compact 行格式针对行溢出的处理是这样的：当发生行溢出时，在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在「溢出页」中，然后真实数据处用 20 字节存储<strong>指向溢出页的地址，从而可以找到剩余数据所在的页。</strong></p><p>Compressed 和 Dynamic 这两种格式采用完全的行溢出方式，记录的真实数据处不会存储该列的一部分数据，只存储 20 个字节的指针来指向溢出页。而实际的数据都存储在溢出页中。</p><p>参考资料：</p><ul><li>《MySQL 是怎样运行的》</li><li>《MySQL技术内幕 InnoDB存储引擎》</li></ul>`,67);function k(b,f){const s=r("ExternalLinkIcon");return i(),o("div",null,[n("blockquote",null,[n("p",null,[a("原文链接："),n("a",l,[a("https://xiaolincoding.com/"),t(s)])]),g]),d,n("p",null,[a("页的类型有很多，常见的有数据页、undo 日志页、溢出页等等。数据表中的行记录是用「数据页」来管理的，数据页的结构这里我就不讲细说了，之前文章有说过，感兴趣的可以去看这篇文章："),n("a",u,[a("换一个角度看 B+ 树(opens new window)"),t(s)])]),h,n("p",null,[a("如果你熟悉 MVCC 机制，你应该就清楚 trx_id 和 roll_pointer 的作用了，如果你还不知道 MVCC 机制，可以看完"),n("a",m,[a("这篇文章(opens new window)"),t(s)]),a("，一定要掌握，面试也很经常问 MVCC 是怎么实现的。")]),L])}const _=p(c,[["render",k],["__file","2.html.vue"]]);export{_ as default};
