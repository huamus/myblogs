import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as s,c as i,a as e,b as o,d as l,f as a}from"./app-b18a8720.js";const _={},c={href:"https://mp.weixin.qq.com/s/FYH1I8CRsuXDSybSGY_AFA",target:"_blank",rel:"noopener noreferrer"},h=a('<p>还没关注的朋友，可以微信搜索「<strong>小林coding</strong>」，关注我的公众号，<strong>后续最新版本的 PDF 会在我的公众号第一时间发布</strong>，而且会有更多其他系列的图解文章，比如操作系统、计算机组成、数据库、算法等等。</p><p>简单介绍下这个《图解系统》，整个内容共有 <strong>16W</strong> <strong>字 +</strong> <strong>400</strong> <strong>张图</strong>，文字都是小林一个字一个字敲出来的，图片都是小林一个点一条线画出来的，非常的不容易。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202307012046672.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图解系统不仅仅涉及了操作系统的内容，还涉及一些计算机组成和 Linux 命令的内容，</p><p>当然还是操作系统的内容占比较高，基本把操作系统<strong>进程管理、内存管理、文件系统、设备管理、网络系统</strong>这五大结构图解了，其中进程管理和网络系统这两个章节篇幅比较多，进程管理不仅包含了进程与线程的基本知识，还包含了进程间通信，多线程同步、死锁、悲观锁和乐观锁。网络系统包含 I/O 多路复用、零拷贝、Reactor 等等。</p><p>计算机组成主要涉及是 CPU 方面的知识，我们不关注 CPU 是怎么设计与实现的，<strong>只关注跟我们开发者有关系的 CPU 知识</strong>，比如 CPU 执行程序的原理，CPU 缓存，CPU 伪共享等等，这些看似跟我们开发者无关，实际上关系挺大的，只有了解 CPU 缓存才能写出更快的代码，只有了解 CPU 伪共享才能避免写出无效缓存的代码。</p><p>至于 Linux 命令的章节暂时内容没有很多，主要就写了如何用 Linux 命令「查看网络指标」和「从日志分析 PV、UV」，之所以没有写太多是觉得命令类的文章没办法体现出小林的图解功力，再加上这类命令一般网上资源也很多，工作中遇到需要使用某个命令时，去搜索了解并自己体验了一番后，才会比较深刻，单纯只看文章很容易就忘记这些命令了。</p><h1 id="小白适合看吗" tabindex="-1"><a class="header-anchor" href="#小白适合看吗" aria-hidden="true">#</a> 小白适合看吗？</h1><p>《图解系统》不是单纯的面经，而是相对比较系统化的内容，当然小林所写的内容是操作系统的重点知识，也是面试常问的知识点。</p><p>我觉得相比背零零散散的面经，更建议你学好整个操作系统的知识体系，后面你在看面经的时候，你会发觉这些只不过是这颗知识树中的一个小分支，而且延展性会更好。</p><p>操作系统是很容易让小白畏惧一门课，因为不管哪本操作系统书都是厚厚的，就会觉得操作系统东西太多，而且也不容易看懂，每个字我们能得懂，但是连成一句话就看懵了。</p><p>其实小林当时在入门操作系统的时候，也是跟大家感受一样的，谁不是从小白度过过来的呢？</p><p>之前我花了很多时间看书和看视频，学好操作系统后，我就在想能不能写一份帮助大家快速入门操作系统系统文章呢，于是就开始踏上了图解之路，<strong>用精美的图片打破大家对操作系统的畏惧感</strong>。</p><p>事实证明，图解系列是正确的，在公众号连续写了很多篇图解系统的文章后，收到了非常多读者的支持与认可，有反馈以前大学没学会的，然后看了我的文章突然就醒悟了，也有反馈面试前突击了我的文章，然后拿到了心意的 offer。</p><p>所以，这份图解系统适合小白学习，也可以当作面试突击用的手册。</p><p>不过，再怎么吹我的《图解系统》，如果大家想要系统化全面的学习操作系统，自然还是离不开书的，《图解系统》的末尾会有我学习操作系统的心得，会推荐我看过并且认为不错的书和视频，大家可以留意一下。</p><h1 id="要怎么阅读" tabindex="-1"><a class="header-anchor" href="#要怎么阅读" aria-hidden="true">#</a> 要怎么阅读？</h1><p>很诚恳的告诉你，《图解系统》不是教科书。而是我在公众号里写的图解系统文章的整合，所以肯定是没有教科书那么细致和全面，当然也就不会有很多废话，都是直击重点，不绕弯，而且有的知识点书上看不到。</p><p>阅读的顺序可以不用从头读到尾，你可以根据你想要了解的知识点，通过本站的搜索功能，去看哪个章节的文章就好，可以随意阅读任何章节。</p><p>本站的左侧菜单就是《图解系统》的目录结构（别看篇章不多，每一章都是很长很长的文章哦 😆）：</p>',20),p=e("li",null,[e("p",null,[e("strong",null,"硬件结构"),o(" 👇")])],-1),u={href:"https://xiaolincoding.com/os/1_hardware/how_cpu_run.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://xiaolincoding.com/os/1_hardware/storage.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://xiaolincoding.com/os/1_hardware/how_to_make_cpu_run_faster.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://xiaolincoding.com/os/1_hardware/cpu_mesi.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://xiaolincoding.com/os/1_hardware/how_cpu_deal_task.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://xiaolincoding.com/os/1_hardware/soft_interrupt.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://xiaolincoding.com/os/1_hardware/float.html",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,[e("p",null,[e("strong",null,"操作系统结构"),o(" 👇")])],-1),w={href:"https://xiaolincoding.com/os/2_os_structure/linux_vs_windows.html",target:"_blank",rel:"noopener noreferrer"},y=e("li",null,[e("p",null,[e("strong",null,"内存管理"),o(" 👇")])],-1),P={href:"https://xiaolincoding.com/os/3_memory/vmem.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://xiaolincoding.com/os/3_memory/malloc.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://xiaolincoding.com/os/3_memory/mem_reclaim.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://xiaolincoding.com/os/3_memory/alloc_mem.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://xiaolincoding.com/os/3_memory/cache_lru.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://xiaolincoding.com/os/3_memory/linux_mem.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://xiaolincoding.com/os/3_memory/linux_mem2.html",target:"_blank",rel:"noopener noreferrer"},B=e("li",null,[e("p",null,[e("strong",null,"进程管理"),o(" 👇")])],-1),N={href:"https://xiaolincoding.com/os/4_process/process_base.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://xiaolincoding.com/os/4_process/process_commu.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://xiaolincoding.com/os/4_process/multithread_sync.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://xiaolincoding.com/os/4_process/deadlock.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://xiaolincoding.com/os/4_process/pessim_and_optimi_lock.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://xiaolincoding.com/os/4_process/create_thread_max.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://xiaolincoding.com/os/4_process/thread_crash.html",target:"_blank",rel:"noopener noreferrer"},q=e("li",null,[e("p",null,[e("strong",null,"调度算法"),o(" 👇")])],-1),z={href:"https://xiaolincoding.com/os/5_schedule/schedule.html",target:"_blank",rel:"noopener noreferrer"},D=e("li",null,[e("p",null,[e("strong",null,"文件系统"),o(" 👇")])],-1),O={href:"https://xiaolincoding.com/os/6_file_system/file_system.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://xiaolincoding.com/os/6_file_system/pagecache.html",target:"_blank",rel:"noopener noreferrer"},Y=e("li",null,[e("p",null,[e("strong",null,"设备管理"),o(" 👇")])],-1),H={href:"https://xiaolincoding.com/os/7_device/device.html",target:"_blank",rel:"noopener noreferrer"},T=e("li",null,[e("p",null,[e("strong",null,"网络系统"),o(" 👇")])],-1),X={href:"https://xiaolincoding.com/os/8_network_system/zero_copy.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://xiaolincoding.com/os/8_network_system/selete_poll_epoll.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://xiaolincoding.com/os/8_network_system/reactor.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://xiaolincoding.com/os/8_network_system/hash.html",target:"_blank",rel:"noopener noreferrer"},M=e("li",null,[e("p",null,[e("strong",null,"学习心得"),o(" 👇")])],-1),Q={href:"https://xiaolincoding.com/os/9_linux_cmd/linux_network.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://xiaolincoding.com/os/9_linux_cmd/pv_uv.html",target:"_blank",rel:"noopener noreferrer"},$=e("li",null,[e("p",null,[e("strong",null,"学习心得"),o(" 👇")])],-1),ee={href:"https://xiaolincoding.com/os/10_learn/learn_os.html",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://xiaolincoding.com/os/10_learn/draw.html",target:"_blank",rel:"noopener noreferrer"};function ne(le,re){const n=t("ExternalLinkIcon");return s(),i("div",null,[e("p",null,[o("大家好，我是小林，是《图解系统》的作者，本站的内容都是整理于我"),e("a",c,[o("公众号(opens new window)"),l(n)]),o("里的图解文章。")]),h,e("ul",null,[p,e("li",null,[e("ul",null,[e("li",null,[e("a",u,[o("CPU 是如何执行程序的？"),l(n)])]),e("li",null,[e("a",m,[o("磁盘比内存慢几万倍？"),l(n)])]),e("li",null,[e("a",d,[o("如何写出让 CPU 跑得更快的代码？"),l(n)])]),e("li",null,[e("a",g,[o("CPU 缓存一致性"),l(n)])]),e("li",null,[e("a",f,[o("CPU 是如何执行任务的？"),l(n)])]),e("li",null,[e("a",x,[o("什么是软中断？"),l(n)])]),e("li",null,[e("a",k,[o("为什么 0.1 + 0.2 不等于 0.3 ？"),l(n)])])])]),b,e("li",null,[e("ul",null,[e("li",null,[e("a",w,[o("Linux 内核 vs Windows 内核"),l(n)])])])]),y,e("li",null,[e("ul",null,[e("li",null,[e("a",P,[o("为什么要有虚拟内存？"),l(n)])]),e("li",null,[e("a",C,[o("malloc是如何分配内存的？"),l(n)])]),e("li",null,[e("a",U,[o("内存满了，会发生什么？"),l(n)])]),e("li",null,[e("a",v,[o("在 4GB 物理内存的机器上，申请 8G 内存会怎么样？"),l(n)])]),e("li",null,[e("a",L,[o("如何避免预读失效和缓存污染的问题？"),l(n)])]),e("li",null,[e("a",V,[o("深入理解 Linux 虚拟内存管理"),l(n)])]),e("li",null,[e("a",I,[o("深入理解 Linux 物理内存管理"),l(n)])])])]),B,e("li",null,[e("ul",null,[e("li",null,[e("a",N,[o("进程、线程基础知识"),l(n)])]),e("li",null,[e("a",A,[o("进程间有哪些通信方式？"),l(n)])]),e("li",null,[e("a",E,[o("多线程冲突了怎么办？"),l(n)])]),e("li",null,[e("a",F,[o("怎么避免死锁？"),l(n)])]),e("li",null,[e("a",G,[o("什么是悲观锁、乐观锁？"),l(n)])]),e("li",null,[e("a",R,[o("一个进程最多可以创建多少个线程？"),l(n)])]),e("li",null,[e("a",S,[o("线程崩溃了，进程也会崩溃吗？"),l(n)])])])]),q,e("li",null,[e("ul",null,[e("li",null,[e("a",z,[o("进程调度/页面置换/磁盘调度算法"),l(n)])])])]),D,e("li",null,[e("ul",null,[e("li",null,[e("a",O,[o("文件系统全家桶"),l(n)])]),e("li",null,[e("a",W,[o("进程写文件时，进程发生了崩溃，已写入的数据会丢失吗？"),l(n)])])])]),Y,e("li",null,[e("ul",null,[e("li",null,[e("a",H,[o("键盘敲入 A 字母时，操作系统期间发生了什么？"),l(n)])])])]),T,e("li",null,[e("ul",null,[e("li",null,[e("a",X,[o("什么是零拷贝？"),l(n)])]),e("li",null,[e("a",j,[o("I/O 多路复用：select/poll/epoll"),l(n)])]),e("li",null,[e("a",J,[o("高性能网络模式：Reactor 和 Proactor"),l(n)])]),e("li",null,[e("a",K,[o("什么是一致性哈希？"),l(n)])])])]),M,e("li",null,[e("ul",null,[e("li",null,[e("a",Q,[o("如何查看网络的性能指标？"),l(n)])]),e("li",null,[e("a",Z,[o("画图经验分享"),l(n)])])])]),$,e("li",null,[e("ul",null,[e("li",null,[e("a",ee,[o("计算机网络怎么学？"),l(n)])]),e("li",null,[e("a",oe,[o("画图经验分享"),l(n)])])])])])])}const ie=r(_,[["render",ne],["__file","1.1.html.vue"]]);export{ie as default};
