import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,f as s}from"./app-f9570060.js";const o={},a=s(`<p>平时我们打开网页，比如购物网站某宝。都是点一下「列表商品」，跳转一下网页就到了「商品详情」。</p><p>从 HTTP 协议的角度来看，就是点一下网页上的某个按钮，<strong>前端发一次 HTTP请求，网站返回一次 HTTP 响应</strong>。这种由客户端主动请求，服务器响应的方式也满足大部分网页的功能场景。</p><p>但有没有发现，这种情况下，服务器从来就「不会主动」给客户端发一次消息。就像你喜欢的女生从来不会主动找你一样。</p><p>但如果现在，你在刷网页的时候「右下角」突然弹出一个小广告，提示你【一个人在家偷偷才能玩哦】。</p><p><strong>求知，好学，勤奋</strong>，这些刻在你 DNA 里的东西都动起来了。</p><p>你点开后发现。</p><p>长相平平无奇的古某提示你&quot;道士 9 条狗，全服横着走&quot;。</p><p>影帝某辉老师跟你说&quot;系兄弟就来砍我&quot;。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358399.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>来都来了，你就选了个角色进到了游戏界面里。</p><p>这时候，上来就是一个小怪，从远处走来，然后疯狂拿木棒子抽你。</p><p><strong>你全程没点任何一次鼠标</strong>。服务器就自动将怪物的移动数据和攻击数据源源不断发给你了。</p><p>这….太暖心了。</p><p>感动之余，问题就来了，</p><p>像这种<strong>看起来服务器主动发消息给客户端的场景</strong>，是怎么做到的？</p><p>在真正回答这个问题之前，我们先来聊下一些相关的知识背景。</p><h1 id="使用-http-不断轮询" tabindex="-1"><a class="header-anchor" href="#使用-http-不断轮询" aria-hidden="true">#</a> 使用 HTTP 不断轮询</h1><p>其实问题的痛点在于，<strong>怎么样才能在用户不做任何操作的情况下，网页能收到消息并发生变更。</strong></p><p>最常见的解决方案是，<strong>网页的前端代码里不断定时发 HTTP 请求到服务器，服务器收到请求后给客户端响应消息。</strong></p><p>这其实是一种「<strong>伪</strong>」服务器推的形式。</p><p>它其实并不是服务器主动发消息到客户端，而是客户端自己不断偷偷请求服务器，只是用户无感知而已。</p><p>用这种方式的场景也有很多，最常见的就是<strong>扫码登录</strong>。</p><p>比如，某信公众号平台，登录页面二维码出现之后，<strong>前端</strong>网页根本不知道用户扫没扫，于是不断去向<strong>后端</strong>服务器询问，看有没有人扫过这个码。而且是以大概 1 到 2 秒的间隔去不断发出请求，这样可以保证用户在扫码后能在 1 到 2 秒内得到及时的反馈，不至于<strong>等太久</strong>。</p><p>使用HTTP定时轮询</p><p>但这样，会有两个比较明显的问题：</p><ul><li>当你打开 F12 页面时，你会发现满屏的 HTTP 请求。虽然很小，但这其实也消耗带宽，同时也会增加下游服务器的负担。</li><li>最坏情况下，用户在扫码后，需要等个 1~2 秒，正好才触发下一次 HTTP 请求，然后才跳转页面，用户会感到<strong>明显的卡顿</strong>。</li></ul><p>使用起来的体验就是，二维码出现后，手机扫一扫，然后在手机上点个确认，这时候<strong>卡顿等个 1~2 秒</strong>，页面才跳转。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807014930-7e23b1fd-13a0-451b-9b85-2e42c7c5921c.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>那么问题又来了，<strong>有没有更好的解决方案？</strong></p><p>有，而且实现起来成本还非常低。</p><h1 id="长轮询" tabindex="-1"><a class="header-anchor" href="#长轮询" aria-hidden="true">#</a> 长轮询</h1><p>HTTP 请求发出后，一般会给服务器留一定的时间做响应，比如 3 秒，规定时间内没返回，就认为是超时。</p><p>如果我们的 HTTP 请求<strong>将超时设置的很大</strong>，比如 30 秒，<strong>在这 30 秒内只要服务器收到了扫码请求，就立马返回给客户端网页。如果超时，那就立马发起下一次请求。</strong></p><p><strong>这样就减少了 HTTP 请求的个数</strong>，并且由于大部分情况下，用户都会在某个 30 秒的区间内做扫码操作，所以响应也是及时的。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807014492-fc4d38e0-7e61-4af8-8f72-a2f03f57b763.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>比如，某度云网盘就是这么干的。所以你会发现一扫码，手机上点个确认，电脑端网页就<strong>秒跳转</strong>，体验很好。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358454.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>像这种<strong>发起一个请求，在较长时间内等待服务器响应的机制，就是所谓的****长轮询机制</strong>。我们常用的消息队列 RocketMQ 中，消费者去取数据时，也用到了这种方式。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807015717-f30dd02a-a60b-46ff-8c13-4942d3ea20dd.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>像这种，<strong>在用户不感知的情况下，服务器将数据推送给浏览器的技术，就是所谓的<strong><strong>服务器推送</strong></strong>技术</strong>，它还有个毫不沾边的英文名，<strong>comet</strong> 技术，大家听过就好。</p><p>上面提到的两种解决方案（<strong>不断轮询和长轮询），本质上，其实还是客户端主动去取数据</strong>。</p><p>对于像扫码登录这样的<strong>简单场景</strong>还能用用。但如果是网页游戏呢，游戏一般会有大量的数据需要从服务器主动推送到客户端。</p><p>这就得说下 <strong>WebSocket</strong> 了。</p><h1 id="websocket是什么" tabindex="-1"><a class="header-anchor" href="#websocket是什么" aria-hidden="true">#</a> WebSocket是什么</h1><p><strong>TCP 连接的两端，<strong><strong>同一时间里</strong></strong>，<strong><strong>双方</strong></strong>都可以<strong><strong>主动</strong></strong>向对方发送数据。这就是所谓的****全双工</strong>。</p><p>而<strong>现在使用最广泛的<strong><strong>HTTP/1.1</strong></strong>，也是基于TCP协议的，<strong><strong>同一时间里</strong></strong>，客户端和服务器<strong><strong>只能有一方主动</strong></strong>发数据，这就是所谓的****半双工</strong>。</p><p>也就是说，好好的全双工 TCP，被 HTTP/1.1 用成了半双工。</p><p>为什么？</p><p>这是由于 HTTP 协议设计之初，考虑的是看看网页文本的场景，能做到<strong>客户端发起请求再由服务器响应</strong>，就够了，根本就没考虑网页游戏这种，客户端和服务器之间都要互相主动发大量数据的场景。</p><p>所以，为了更好的支持这样的场景，我们需要另外一个<strong>基于TCP的新协议</strong>。</p><p>于是新的应用层协议<strong>WebSocket</strong>就被设计出来了。</p><p>大家别被这个名字给带偏了。虽然名字带了个socket，但其实 <strong>socket 和 WebSocket 之间，就跟雷峰和雷峰塔一样，二者接近毫无关系</strong>。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358431.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="怎么建立websocket连接" tabindex="-1"><a class="header-anchor" href="#怎么建立websocket连接" aria-hidden="true">#</a> 怎么建立WebSocket连接</h2><p>我们平时刷网页，一般都是在浏览器上刷的，一会刷刷图文，这时候用的是 <strong>HTTP 协议</strong>，一会打开网页游戏，这时候就得切换成我们新介绍的 <strong>WebSocket 协议</strong>。</p><p>为了兼容这些使用场景。浏览器在 <strong>TCP 三次握手</strong>建立连接之后，都<strong>统一使用 HTTP 协议</strong>先进行一次通信。</p><ul><li>如果此时是<strong>普通的 HTTP 请求</strong>，那后续双方就还是老样子继续用普通 HTTP 协议进行交互。</li><li>如果这时候是<strong>想建立 WebSocket 连接</strong>，就会在 HTTP 请求里带上一些<strong>特殊的header 头</strong>，如下：</li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Upgrade</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">WebSocket</span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Key</span><span class="token punctuation">:</span> <span class="token header-value">T2a6wZlAwhgQNqruZ2YUyg==\\r\\n</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些 header 头的意思是，浏览器想<strong>升级协议（Connection: Upgrade）</strong>，并且<strong>想升级成 WebSocket 协议（Upgrade: WebSocket）</strong>。同时带上一段<strong>随机生成的 base64 码（Sec-WebSocket-Key）</strong>，发给服务器。</p><p>如果服务器正好支持升级成 WebSocket 协议。就会走 WebSocket 握手流程，同时根据客户端生成的 base64 码，用某个<strong>公开的</strong>算法变成另一段字符串，放在 HTTP 响应的 Sec-WebSocket-Accept 头里，同时带上101状态码，发回给浏览器。HTTP 的响应如下：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">101</span> <span class="token reason-phrase string">Switching Protocols\\r\\n</span></span>
<span class="token header"><span class="token header-name keyword">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> <span class="token header-value">iBJKv/ALIW2DobfoA4dmr3JHBCY=\\r\\n</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">WebSocket\\r\\n</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Upgrade\\r\\n</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 状态码=200（正常响应）的情况，大家见得多了。101 确实不常见，它其实是指<strong>协议切换</strong>。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807016741-bc564738-5a19-4fac-98ea-e2883723dee0.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>之后，浏览器也用同样的<strong>公开算法</strong>将base64码转成另一段字符串，如果这段字符串跟服务器传回来的<strong>字符串一致</strong>，那验证通过。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358856.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>就这样经历了一来一回两次 HTTP 握手，WebSocket就建立完成了，后续双方就可以使用 webscoket 的数据格式进行通信了。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358882.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="websocket抓包" tabindex="-1"><a class="header-anchor" href="#websocket抓包" aria-hidden="true">#</a> WebSocket抓包</h2><p>我们可以用wireshark抓个包，实际看下数据包的情况。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358138.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面这张图，注意画了红框的第2445行报文，是WebSocket的<strong>第一次握手</strong>，意思是发起了一次带有特殊Header的HTTP请求。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807017821-04001457-b436-4f1f-84fb-7d5dd7e6c36c.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面这个图里画了红框的4714行报文，就是服务器在得到第一次握手后，响应的<strong>第二次握手</strong>，可以看到这也是个 HTTP 类型的报文，返回的状态码是 101。同时可以看到返回的报文 header 中也带有各种WebSocket相关的信息，比如Sec-WebSocket-Accept。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358436.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面这张图就是全貌了，从截图上的注释可以看出，WebSocket和HTTP一样都是基于TCP的协议。<strong>经历了三次TCP握手之后，利用 HTTP 协议升级为 WebSocket 协议</strong>。</p><p>你在网上可能会看到一种说法：&quot;WebSocket 是基于HTTP的新协议&quot;，<strong>其实这并不对</strong>，因为WebSocket只有在建立连接时才用到了HTTP，<strong>升级完成之后就跟HTTP没有任何关系了</strong>。</p><p>这就好像你喜欢的女生通过你要到了你大学室友的微信，然后他们自己就聊起来了。你能说这个女生是通过你去跟你室友沟通的吗？不能。你跟HTTP一样，都只是个<strong>工具人</strong>。</p><h2 id="websocket的消息格式" tabindex="-1"><a class="header-anchor" href="#websocket的消息格式" aria-hidden="true">#</a> WebSocket的消息格式</h2><p>上面提到在完成协议升级之后，两端就会用webscoket的数据格式进行通信。</p><p>数据包在WebSocket中被叫做<strong>帧</strong>，我们来看下它的数据格式长什么样子。</p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358448.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里面字段很多，但我们只需要关注下面这几个。</p><p><strong>opcode字段</strong>：这个是用来标志这是个<strong>什么类型</strong>的数据帧。比如。</p><ul><li>等于 1 ，是指text类型（string）的数据包</li><li>等于 2 ，是二进制数据类型（[]byte）的数据包</li><li>等于 8 ，是关闭连接的信号</li></ul><p><strong>payload字段</strong>：存放的是我们<strong>真正想要传输的数据的长度</strong>，单位是<strong>字节</strong>。比如你要发送的数据是字符串&quot;111&quot;，那它的长度就是3。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807019241-e326e333-a76e-4a8a-b0f3-e5304c96fa4d.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>另外，可以看到，我们存放 payload 长度的字段有好几个，我们既可以用最前面的7bit, 也可以用后面的7+16bit 或 7+64bit。</p><p>那么问题就来了。</p><p>我们知道，在数据层面，大家都是 01 二进制流。我怎么知道<strong>什么情况下应该读 7 bit，什么情况下应该读7+16bit呢？</strong></p><p>WebSocket会用最开始的7bit做标志位。不管接下来的数据有多大，都<strong>先读最先的7个bit</strong>，根据它的取值决定还要不要再读个 16bit 或 64bit。</p><ul><li>如果最开始的7bit的值是 0~125，那么它就表示了 <strong>payload 全部长度</strong>，只读最开始的7个bit就完事了。</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807019644-fe3ad43b-7156-4cf8-b123-db39be40f7fa.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>如果是126（0x7E）。那它表示payload的长度范围在 126~65535 之间，接下来还需要<strong>再读16bit</strong>。这16bit会包含payload的真实长度。</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807019882-3f7cc3bd-26ca-4767-90c1-26e77dfb14e5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>如果是127（0x7F）。那它表示payload的长度范围&gt;=65536，接下来还需要<strong>再读64bit</strong>。这64bit会包含payload的长度。这能放2的64次方byte的数据，换算一下好多个TB，肯定够用了。</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807020208-af7c5666-662f-4bc5-8d22-9fed1c8dc1bd.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>payload data字段</strong>：这里存放的就是真正要传输的数据，在知道了上面的payload长度后，就可以根据这个值去截取对应的数据。</p><p>大家有没有发现一个小细节，<strong>WebSocket的数据格式也是****数据头（内含payload长度） + payload data</strong> <strong>的形式。</strong></p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358909.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>这是因为 TCP 协议本身就是全双工，但直接使用<strong><strong>纯裸TCP</strong></strong>去传输数据，会有<strong><strong>粘包</strong></strong>的&quot;问题&quot;。为了解决这个问题，上层协议一般会用<strong><strong>消息头+消息体</strong></strong>的格式去重新包装要发的数据。</strong></p><p><strong>而<strong><strong>消息头</strong></strong>里一般含有<strong><strong>消息体的长度</strong></strong>，通过这个长度可以去截取真正的消息体。</strong></p><p>HTTP 协议和大部分 RPC 协议，以及我们今天介绍的WebSocket协议，都是这样设计的。</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/25684216/1683807020407-53f6eb9c-229c-4058-90b9-9b7f6a9e9925.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="websocket的使用场景" tabindex="-1"><a class="header-anchor" href="#websocket的使用场景" aria-hidden="true">#</a> WebSocket的使用场景</h2><p><strong>WebSocket完美继承了 TCP 协议的<strong><strong>全双工</strong></strong>能力，并且还贴心的提供了解决粘包的方案。</strong></p><p><strong>它适用于<strong><strong>需要服务器和客户端（浏览器）频繁交互</strong></strong>的大部分场景</strong>，比如网页/小程序游戏，网页聊天室，以及一些类似飞书这样的网页协同办公软件。</p><p>回到文章开头的问题，在使用 WebSocket 协议的网页游戏里，怪物移动以及攻击玩家的行为是<strong>服务器逻辑</strong>产生的，对玩家产生的伤害等数据，都需要<strong>由<strong><strong>服务器主动发送给客户端</strong></strong>，客户端获得数据后展示对应的效果。</strong></p><figure><img src="https://raw.githubusercontent.com/huamus/picture-bed/main/img202306290358098.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><ul><li>TCP 协议本身是<strong>全双工</strong>的，但我们最常用的 HTTP/1.1，虽然是基于 TCP 的协议，但它是<strong>半双工</strong>的，对于大部分需要服务器主动推送数据到客户端的场景，都不太友好，因此我们需要使用支持全双工的 WebSocket 协议。</li><li>在 HTTP/1.1 里，只要客户端不问，服务端就不答。基于这样的特点，对于登录页面这样的简单场景，可以使用<strong>定时轮询或者长轮询</strong>的方式实现<strong>服务器推送</strong>(comet)的效果。</li><li>对于<strong>客户端和服务端之间需要频繁交互的复杂场景</strong>，比如网页游戏，都可以考虑使用 WebSocket 协议。</li><li>WebSocket 和 socket 几乎没有任何关系，只是叫法相似。</li><li>正因为各个浏览器都支持 HTTP协议，所以 WebSocket 会先利用HTTP协议加上一些特殊的 header 头进行握手升级操作，升级成功后就跟 HTTP 没有任何关系了，之后就用 WebSocket 的数据格式进行收发数据。</li></ul>`,110),g=[a];function r(i,p){return n(),e("div",null,g)}const l=t(o,[["render",r],["__file","3.9.html.vue"]]);export{l as default};
